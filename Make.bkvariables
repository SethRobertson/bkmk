# -*- makefile -*-
#
# $Id: Make.bkvariables,v 1.49 2003/10/13 16:22:32 jtt Exp $
#
# ++Copyright LIBBK++
#
# Copyright (c) 2003 The Authors. All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Mail <projectbaka@baka.org> for further information
#
# --Copyright LIBBK--
#
#
# Baka specific master variables
#


# WARNING: BEWARE OF THE OVERUSE OF AUTOCONF'ED PROGRAM NAMES IN $(shell)
# DIRECTIVES. SINCE MANY OF THESE ASSIGNMENTS WILL BE EVALUATED BETWEEN A
# make clean AND THE SUBSEQUENT configure, AUTOCONF'ED VARIABLES WILL BE
# UNDEFINED RESULTING IN THE SHELL ATTEMPTING TO "EXECUTE" THE *ARGUMENTS* OF
# THE PROGRAM TO WHICH THE VARIABLE WOULD HAVE REFERRED.

# Do the activities requiring subprograms once only for efficiency
ifneq ($(BKMK_VAR_CORRECT),true)

# Discover where true (non-BUILD directory) group and package locations are
BK_REALTOP:=$(shell cd $(GROUPTOP)/$(PKGTOP) && pwd)
BK_PKGNAME:=$(shell basename $(BK_REALTOP) || echo "UNKNOWN-PKG")
BK_BUILDTOP:=$(shell test -L $(GROUPTOP)/$(PKGTOP)/bkmk/Make.include && echo ../../ )

# Discover top level .user-variables
BK_TOP_USER_VARIABLES:=$(shell $(BKMKDIR)/find_user_var.pl "$(GROUPTOP)/$(PKGTOP)")

override BKMK_VAR_CORRECT = true
BK_ARCHNAME = $(shell uname -s | tr / - )-$(shell uname -r | sed 's/ .*//')-$(shell uname -m | tr / - )
BK_OSNAME = $(shell uname -s | tr / - | sed 's/_.*//')-$(shell uname -r | sed 's/\(\.[^.()-]*\)[-.].*/\1/')

BK_OSFILE=.config_os_type
BKMK_OSFILE=$(BKMKDIR)/$(BK_OSFILE)

export BK_ARCHNAME BK_OSNAME BKMK_VAR_CORRECT BK_REALTOP BK_PKGNAME BK_BUILDTOP BK_TOP_USER_VARIABLES

# Avoid all this mess for 3rd party packages built via GNUmakefile
ifeq ($(CONFIGURED),)
##################################################
#
# Make sure that we've configured using the correct architecture
#
BK_CONFIG_OS_TYPE=$(shell cat $(BKMK_OSFILE) 2>/dev/null)

# <TRICKY>Linux's implementation of /dev/fd/* is LAME with a capital L A M E!
# Rather than have a special character device that just dups a file descriptor,
# they make /dev/fd/* a symlink (this works poorly if the file on /dev/fd/* has
# been unlinked - a broken symlink to "/some/file (deleted)"!) and doesn't work
# correctly if the process no longer has rights to open the file for the fd
# (e.g. an su'd shell cannot open the /dev/pts/* terminal that is its
# stdin/out/err).  So we must check for write access as well.</TRICKY>
# <TRICKY>Why, one asks, do we need to use /dev/fd/* at all?  Well, xemacs
# compile mode on FreeBSD doesn't bother to open a pseudo-tty for the compile
# process (it just uses a pipe), so /dev/tty doesn't work - the process has no
# controlling tty.  So we use stderr (or try to).</TRICKY>
F2=/dev/fd/2
BK_TTY:=$(shell test -c $(F2) && test -w $(F2) && echo $(F2) || echo /dev/tty)

BK_GOAL_IS_CLEAN:=true
ifeq ($(findstring neat,$(MAKECMDGOALS)),)
ifeq ($(findstring clean,$(MAKECMDGOALS)),)
ifeq ($(findstring nuke,$(MAKECMDGOALS)),)
BK_GOAL_IS_CLEAN:=false
endif
endif
endif

ifneq ($(BK_CONFIG_OS_TYPE),$(BK_OSNAME))

# Oh boy. What a bloody hack. Assign to a variable (using := so that it gets
# evaluated right now), so that the line complies with makefile syntax, but all
# the work done by the $(shell) command is displayed to the the current tty.
# Note the use of "rm", since we can't depend on configured $(RM); this could
# technically fail, but it's pretty unlikely.

# NB: we do not bother reconfiguring if the cmd goal is one of our clean 
# targets *unless* we are changing architectures in which case we need to
# to reconfigure in order to give the target the best chance (by no means
# guarenteed) of succeeding.

BK_DUMMY:=$(shell							      \
  (if [ -f $(BKMK_OSFILE) ]; then					      \
     NEAT=true;								      \
     echo; echo "	DETECTED ARCHITECTURE CHANGE"; echo;		      \
   else									      \
     NEAT=false;							      \
   fi;									      \
   rm -f $(BKMK_OSFILE);						      \
   (cd $(BKMKDIR) && [ $$NEAT = "true" -o $(BK_GOAL_IS_CLEAN) = "false" ] && {\
     rm -f config.cache config.status;					      \
     $(MAKE) -s config.status OSNAME=$(BK_OSNAME) OSFILE=$(BK_OSFILE); }; );  \
   ($$NEAT && cd $(GROUPTOP)/$(PKGTOP) && {				      \
     eval `sed -n -e "s/=/='/" -e "/^ECHO_/s/.*/&'/p" < bkmk/Make.config` &&  \
     echo $$ECHO_N 'Making neat (Remember to "$(MAKE) depend")...'$$ECHO_C;   \
     $(MAKE) neat >/dev/null;						      \
     echo "done"; echo; }; ); )	2>&1					      \
  | tee $(BK_TTY) 2>/dev/null )

else

export CONFIGURE_ARGS

ifneq ($(BK_GOAL_IS_CLEAN),true)
BK_DUMMY:=$(shell (cd $(BKMKDIR) && $(MAKE) -s config.status .timestamp) 2>&1 | tee $(BK_TTY) 2>/dev/null )
endif

endif # BK_CONFIG_OS_TYPE != BK_OSNAME

#
##################################################
endif # CONFIGURED

endif # BKMK_VAR_CORRECT

# Verify that $PWD points to the right place, since it is not updated by make
# when run with make -C dir (or by make otherwise, nor by emacs, et al.)
# This MUST be run in EVERY make to ensure accuracy; things break otherwise.
PWD:=$(shell $(BKMKDIR)/getcwd.sh 2>/dev/null || $(BKMKDIR)/getcwd.sh.in)

BK_TRUEGROUPTOP=$(BK_BUILDTOP)$(GROUPTOP)
BK_TRUEPKGTOP=$(TRUEGROUPTOP)/$(PKGTOP)
BK_TRUECWD=$(TRUEPKGTOP)/$(PKGSUBDIR)/$(GROUPSUBDIR)

# If we have a .user-variables, save it for us and decedents
ifneq ($(strip $(wildcard .user-variables)),)
BK_TOP_USER_VARIABLES:=$(PWD)/.user-variables
export BK_TOP_USER_VARIABLES
endif
BK_USER_VARIABLES:=$(BK_TOP_USER_VARIABLES)

ifeq ($(BK_JAVADIR),)
BK_JAVADIR=$(GROUPTOP)/$(PKGTOP)/JAVA
endif

ifeq ($(BK_INSTALLBASE),)
BK_INSTALLBASE=$(GROUPTOP)/$(PKGTOP)/INSTALL
endif

ifeq ($(BK_INSTALLPROGDIR),)
BK_INSTALLPROGDIR=$(BK_INSTALLBASE)/bin
endif
ifeq ($(BK_INSTALLLIBDIR),)
BK_INSTALLLIBDIR=$(BK_INSTALLBASE)/lib
endif
ifeq ($(BK_INSTALLINCDIR),)
BK_INSTALLINCDIR=$(BK_INSTALLBASE)/include
endif
ifeq ($(BK_INSTALLDATADIR),)
BK_INSTALLDATADIR=$(BK_INSTALLBASE)/etc
endif
ifeq ($(BK_INSTALLARCHIVEDIR),)
BK_INSTALLARCHIVEDIR=$(BK_INSTALLBASE)/archives
endif
ifeq ($(BK_INSTALLCONFIGDIR),)
BK_INSTALLCONFIGDIR=$(BK_INSTALLBASE)/etc
endif
ifeq ($(BK_INSTALLMANDIR),)
BK_INSTALLMANDIR=$(BK_INSTALLBASE)/man
endif
ifeq ($(BK_INSTALLDOCDIR),)
BK_INSTALLDOCDIR=$(BK_INSTALLBASE)/doc
endif
ifeq ($(BK_INSTALLJAVADIR),)
BK_INSTALLJAVADIR=$(BK_INSTALLBASE)/java
endif
ifeq ($(BK_INSTALLPERLDIR),)
BK_INSTALLPERLDIR=$(BK_INSTALLBASE)/perl
endif
