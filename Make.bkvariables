# -*- makefile -*-
#
# $Id: Make.bkvariables,v 1.11 2002/01/07 17:03:12 jtt Exp $
#
# ++Copyright LIBBK++
#
# Copyright (c) 2001 The Authors.  All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Mail <projectbaka@baka.org> for further information
#
# --Copyright LIBBK--
#
#
# Baka specific master variables
#

# WARNING: BEWARE OF THE OVERUSE OF AUTOCONF'ED PROGRAM NAMES IN $(shell) 
# DIRECTIVES. SINCE MANY OF THESE ASSIGNMENTS WILL BE EVALUATED BETWEEN A
# make clean AND THE SUBSEQUENT configure, AUTOCONF'ED VARIABLES WILL BE 
# UNDEFINED RESULTING IN THE SHELL ATTEMPTING TO "EXECUTE" THE *ARGUMENTS* OF 
# THE PROGRAM TO WHICH THE VARIABLE WOULD HAVE REFERRED. 

# Do the activities requiring subprograms once only for efficiency
ifneq ($(BKMK_VAR_CORRECT),true)


BKMK_VAR_CORRECT = true
BK_ARCHNAME = $(shell uname -s | tr / - )-$(shell uname -r | sed 's/ .*//')-$(shell uname -m | tr / - )
BK_OSNAME = $(shell uname -s | tr / - )-$(shell uname -r | sed 's/\(\.[^.]*\)\..*/\1/')

BKMK_OSFILE=$(BKMKDIR)/.config_os_type

#ifneq ($(BKMK_OSFILE),)
##################################################
#
# Make sure that we've configured using the correct architecture
#
BK_CONFIG_OS_TYPE=$(shell cat $(BKMK_OSFILE) 2>/dev/null)

ifneq ($(BK_CONFIG_OS_TYPE),$(BK_OSNAME))

# Oh boy. What a bloody hack. Assign to a variable (using := so that it gets
# evaluated right now), so that the line complies with makefile syntax, but
# all the work done by the $(shell) command is displayed to the the current
# tty. BTW: Note the use of "rm", since we can't depend on configured $(RM);
# this could technically fail, but it's pretty unlikely.

#BK_DUMMY:=$(shell (cd $(BKMKDIR) && { rm -f config.cache config.status; $(MAKE) -s .timestamp OSNAME=$(BK_OSNAME) OSFILE=$(BKMK_OSFILE); }) 2>/dev/null >/dev/tty)

BK_DUMMY:=$(shell (echo $(BK_OSNAME) > $(BKMK_OSFILE) && cd $(GROUPTOP)/$(PKGTOP) && echo -e "\n\tDETECTED ARCHITECTURE CHANGE\n" && echo -n "Making neat (Don't forget to run $(MAKE) depend aftwards)...." && $(MAKE) neat >/dev/null && echo "done"  && cd $(BKMKDIR) && { rm -f config.status; $(MAKE) -s .timestamp OSNAME=$(BK_OSNAME) OSFILE=$(BKMK_OSFILE); }) 2>/dev/null >/dev/tty)

else

BK_DUMMY:=$(shell (cd $(BKMKDIR) && $(MAKE) -s .timestamp) 2>/dev/null >/dev/tty)

endif # BK_CONFIG_OS_TYPE != BK_OSNAME

#
##################################################
#endif # BKMK_OSFILE


endif # BKMK_VAR_CORRECT

# Discover where true (non-BUILD directory) group and package locations are
BK_REALTOP:=$(shell cd $(GROUPTOP)/$(PKGTOP) && pwd)
BK_PKGNAME:=$(shell  basename $(BK_REALTOP) || echo "UNKNOWN-PKG")
BK_BUILDTOP:=$(shell test -L $(GROUPTOP)/$(PKGTOP)/bkmk/Make.include && echo ../../ )
BK_TRUEGROUPTOP=$(BK_BUILDTOP)$(GROUPTOP)
BK_TRUEPKGTOP=$(TRUEGROUPTOP)/$(PKGTOP)
BK_TRUECWD=$(TRUEPKGTOP)/$(PKGSUBDIR)/$(GROUPSUBDIR)
