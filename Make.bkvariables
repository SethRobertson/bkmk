# -*- makefile -*-
#
# $Id: Make.bkvariables,v 1.31 2002/08/25 20:19:53 seth Exp $
#
# ++Copyright LIBBK++
#
# Copyright (c) 2001 The Authors.  All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Mail <projectbaka@baka.org> for further information
#
# --Copyright LIBBK--
#
#
# Baka specific master variables
#


# WARNING: BEWARE OF THE OVERUSE OF AUTOCONF'ED PROGRAM NAMES IN $(shell) 
# DIRECTIVES. SINCE MANY OF THESE ASSIGNMENTS WILL BE EVALUATED BETWEEN A
# make clean AND THE SUBSEQUENT configure, AUTOCONF'ED VARIABLES WILL BE 
# UNDEFINED RESULTING IN THE SHELL ATTEMPTING TO "EXECUTE" THE *ARGUMENTS* OF 
# THE PROGRAM TO WHICH THE VARIABLE WOULD HAVE REFERRED. 

# Do the activities requiring subprograms once only for efficiency
ifneq ($(BKMK_VAR_CORRECT),true)

# Discover where true (non-BUILD directory) group and package locations are
BK_REALTOP:=$(shell cd $(GROUPTOP)/$(PKGTOP) && pwd)
BK_PKGNAME:=$(shell basename $(BK_REALTOP) || echo "UNKNOWN-PKG")
BK_BUILDTOP:=$(shell test -L $(GROUPTOP)/$(PKGTOP)/bkmk/Make.include && echo ../../ )

# Discover top level .user-variables
BK_TOP_USER_VARIABLES:=$(shell $(BKMKDIR)/find_user_var.pl "$(GROUPTOP)/$(PKGTOP)")

override BKMK_VAR_CORRECT = true
BK_ARCHNAME = $(shell uname -s | tr / - )-$(shell uname -r | sed 's/ .*//')-$(shell uname -m | tr / - )
BK_OSNAME = $(shell uname -s | tr / - | sed 's/_.*//')-$(shell uname -r | sed 's/\(\.[^.()-]*\)[-.].*/\1/')

BK_OSFILE=.config_os_type
BKMK_OSFILE=$(BKMKDIR)/$(BK_OSFILE)

export BK_ARCHNAME BK_OSNAME BKMK_VAR_CORRECT BK_REALTOP BK_PKGNAME BK_BUILDTOP BK_TOP_USER_VARIABLES

# Avoid all this mess for 3rd party packages built via GNUmakefile
ifeq ($(CONFIGURED),)
##################################################
#
# Make sure that we've configured using the correct architecture
#
BK_CONFIG_OS_TYPE=$(shell cat $(BKMK_OSFILE) 2>/dev/null)

ifneq ($(BK_CONFIG_OS_TYPE),$(BK_OSNAME))

# Oh boy. What a bloody hack. Assign to a variable (using := so that it gets
# evaluated right now), so that the line complies with makefile syntax, but
# all the work done by the $(shell) command is displayed to the the current
# tty. BTW: Note the use of "rm", since we can't depend on configured $(RM);
# this could technically fail, but it's pretty unlikely.

BK_TTY:=$(shell test -c /dev/fd/2 && echo /dev/fd/2 || echo /dev/tty)

BK_DUMMY:=$(shell							      \
  (if [ -f $(BKMK_OSFILE) ]; then					      \
     NEAT=true;								      \
     echo; echo "	DETECTED ARCHITECTURE CHANGE"; echo;		      \
   else									      \
     NEAT=false;							      \
   fi;									      \
   rm -f $(BKMK_OSFILE);						      \
   (cd $(BKMKDIR) && {							      \
     rm -f config.cache config.status;					      \
     $(MAKE) -s config.status OSNAME=$(BK_OSNAME) OSFILE=$(BK_OSFILE); }; );  \
   ($$NEAT && cd $(GROUPTOP)/$(PKGTOP) && {				      \
     echo -n 'Making neat (Remember to "$(MAKE) depend" afterwards)...';      \
     $(MAKE) neat >/dev/null;						      \
     echo "done"; echo; }; ); )	2>&1					      \
  | tee $(BK_TTY) )

else

BK_DUMMY:=$(shell (cd $(BKMKDIR) && $(MAKE) -s .timestamp) 2>&1 | tee $(BK_TTY))

endif # BK_CONFIG_OS_TYPE != BK_OSNAME

#
##################################################
endif # CONFIGURED


endif # BKMK_VAR_CORRECT

#
# User configuration (from .user-variables or command line)
#
ifneq ($(strip $(WANT_JAVA)),)
BK_WANT_JAVA=$(WANT_JAVA)
endif

ifneq ($(strip $(WANT_C)),)
BK_WANT_C=$(WANT_C)
endif

ifneq ($(strip $(WANT_LIBTOOL)),)
BK_WANT_LIBTOOL=$(WANT_LIBTOOL)
endif

ifneq ($(strip $(WANT_STATIC)),)
BK_WANT_STATIC=$(WANT_STATIC)
endif

ifneq ($(findstring true,$(WANT_GPROF)$(USING_GPROF)),)
BK_USING_GPROF=true
override BK_USING_PROF=false
else
ifneq ($(findstring true,$(WANT_PROF)$(USING_PROF)),)
BK_USING_PROF=true
override BK_USING_GPROF=false
endif
endif

ifneq ($(findstring true,$(WANT_INSURE)$(USING_INSURE)$(USING_INSIGHT)),)
BK_USING_INSURE=true
override BK_USING_DMALLOC=false
override BK_USING_BOUNDS_CHECKING=false
else
ifneq ($(findstring true,$(WANT_DMALLOC)$(USING_DMALLOC)),)
BK_USING_DMALLOC=true
override BK_USING_INSURE=false
override BK_USING_BOUNDS_CHECKING=false
else 
ifneq ($(findstring true,$(WANT_BOUNDS_CHECKING)$(USING_BOUNDS_CHECKING)),)
BK_USING_BOUNDS_CHECKING=true
override BK_USING_INSURE=false
override BK_USING_DMALLOC=false
endif
endif
endif

BK_TRUEGROUPTOP=$(BK_BUILDTOP)$(GROUPTOP)
BK_TRUEPKGTOP=$(TRUEGROUPTOP)/$(PKGTOP)
BK_TRUECWD=$(TRUEPKGTOP)/$(PKGSUBDIR)/$(GROUPSUBDIR)

# If we have a .user-variables, save it for us and decedents
ifneq ($(strip $(wildcard .user-variables)),)
BK_TOP_USER_VARIABLES:=$(PWD)/.user-variables
export BK_TOP_USER_VARIABLES
endif
BK_USER_VARIABLES:=$(BK_TOP_USER_VARIABLES)
