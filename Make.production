# -*- makefile -*-
#
# $Id: Make.production,v 1.64 2003/09/08 23:41:42 dupuy Exp $
#
# ++Copyright LIBBK++
#
# Copyright (c) 2003 The Authors. All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Mail <projectbaka@baka.org> for further information
#
# --Copyright LIBBK--
#
#
# Production rules--convert "source" to "targets"
#

#
# Prevent make from being stupid about building makefile pieces
# (this is just a performance hack, but it helps)
Make%:
.depen%:
.user-variable%:

#
# Last-resort rule to make directories referenced in dependencies (must include
# trailing "/.").  Note that since directories' modified time gets updated on
# any file creation/deletion, use of these dependencies may cause spurious
# re-makes of targets that were not really out of date.  For the Java stuff
# that currently uses this, that isn't an issue (yet).
%/.:
	$(MKDIR) $*

# Keep make from trying to delete "implicit" directories created by above rule
# (it wouldn't be able to, but the unlink: Is a directory error is annoying
.PRECIOUS: %/.

# just in case these aren't already on the suffixes list
.SUFFIXES: $(EXEEXT) $(LIBEXT) $(OBJEXT)

#
# Standard compiling targets
#
%$(OBJEXT): %.c
ifeq ($(BK_USING_INSURE),true)
# Insure++ "handles" back-end compiler errors by printing the useless error
# Driver: error executing "Run -g -W..." so we run the non-insure compile
# with -D__INSURE__ to get useful gcc error messages
	@echo $(LTCC) $(COMPILE.c) $(LT_CFLAGS) $(OUTPUT_OPTION) $<
	@$(LTCC) $(COMPILE.c) $(LT_CFLAGS) $(OUTPUT_OPTION) $< \
	 || $(subst $(CC),$(CC_CONFIG),$(COMPILE.c)) -D__INSURE__ $(OUTPUT_OPTION) $<
else
	$(LTCC) $(COMPILE.c) $(LT_CFLAGS) $(OUTPUT_OPTION) $<
endif

%.i: %.c
	$(CC) -E $(CPPFLAGS) -o $@ $<

%.c: %.l
	$(LEX) $(LFLAGS) -t $< > $@

%.tab.c %.tab.h: %.y
	$(YACC) $(YFLAGS) $<

#
# Simple program production
#
ifeq ($(BK_WANT_LIBTOOL),true)
ifeq ($(BK_USING_INSURE),true)
# Insure++ often generates exceedingly bogus errors when it compiles and links
# in a single command, so make the dependency on the object file and link that.
$(BK_SIMPLE_INTERNALPROGS) $(BK_SIMPLE_PROGS): %: %$(OBJEXT) $(filter -l%,$(BK_ALLLIBS))
# [may not need rpath for insure-linked programs; let's see if it helps]
	$(LTLD) $(LINK.c) $(LT_LDFLAGS) -o $@ $@$(OBJEXT) $(LDLIBS) -rpath $(BK_INSTALLRPATH)
else
$(BK_SIMPLE_INTERNALPROGS) $(BK_SIMPLE_PROGS): %: %.c $(filter -l%,$(BK_ALLLIBS))
	$(LTLD) $(LINK.c) $(LT_LDFLAGS) -o $@ $@.c $(LDLIBS) -rpath $(BK_INSTALLRPATH)
endif
else
ifeq ($(BK_USING_INSURE),true)
# Insure++ often generates exceedingly bogus errors when it compiles and links
# in a single command, so make the dependency on the object file and link that.
$(BK_SIMPLE_INTERNALPROGS) $(BK_SIMPLE_PROGS): %: %$(OBJEXT) $(filter -l%,$(BK_ALLLIBS))
# [may not need rpath for insure-linked programs; let's see if it helps]
	$(LTLD) $(LINK.c) $(LT_LDFLAGS) -o $@ $@$(OBJEXT) $(LDLIBS)
else
$(BK_SIMPLE_INTERNALPROGS) $(BK_SIMPLE_PROGS): %: %.c $(filter -l%,$(BK_ALLLIBS))
	$(LTLD) $(LINK.c) $(LT_LDFLAGS) -o $@ $@.c $(LDLIBS)
endif
endif
#
# Larger program production
#
BK_LARGE_OBJ:=$(patsubst %.c,%$(OBJEXT),$(BK_LARGE_SRC))
BK_LARGE_OBJ:=$(patsubst %.y,%.tab$(OBJEXT),$(BK_LARGE_OBJ))
BK_LARGE_OBJ:=$(patsubst %.l,%$(OBJEXT),$(BK_LARGE_OBJ))

ifeq ($(BK_WANT_LIBTOOL),true)
$(BK_LARGE_INTERNALPROG) $(BK_LARGE_PROG): $(BK_LARGE_OBJ) $(filter -l%,$(BK_ALLLIBS))
	$(LTLD) $(LINK.c) $(LT_LDFLAGS) -o $@ $(BK_LARGE_OBJ) $(LDLIBS) -rpath $(BK_INSTALLRPATH)
else
$(BK_LARGE_INTERNALPROG) $(BK_LARGE_PROG): $(BK_LARGE_OBJ) $(filter -l%,$(BK_ALLLIBS))
	$(LTLD) $(LINK.c) $(LT_LDFLAGS) -o $@ $(BK_LARGE_OBJ) $(LDLIBS)
endif

#
# Large library production
#
BK_LARGE_LIBOBJ:=$(patsubst %.c,%$(OBJEXT),$(BK_LARGE_LIBSRC))
BK_LARGE_LIBOBJ:=$(patsubst %.y,%.tab$(OBJEXT),$(BK_LARGE_LIBOBJ))
BK_LARGE_LIBOBJ:=$(patsubst %.l,%$(OBJEXT),$(BK_LARGE_LIBOBJ))
ifeq ($(BK_WANT_LIBTOOL),true)
BK_LARGE_LIBOBJ2=\
 $(foreach obj,$(BK_LARGE_LIBOBJ),$(dir $(obj)).libs/$(subst $(OBJEXT),.$(OBJEXT_CONFIG),$(notdir $(obj))))
else
BK_LARGE_LIBOBJ2=$(BK_LARGE_LIBOBJ)
endif

#
# Relink library production -- should really use libtool...
#
BK_RELINK_LIBOBJ:=$(patsubst %.c,%$(OBJEXT),$(BK_RELINK_LIBSRC))
BK_RELINK_LIBOBJ:=$(patsubst %.y,%.tab$(OBJEXT),$(BK_RELINK_LIBOBJ))
BK_RELINK_LIBOBJ:=$(patsubst %.l,%$(OBJEXT),$(BK_RELINK_LIBOBJ))
ifeq ($(BK_WANT_LIBTOOL),true)
BK_RELINK_LIBOBJ2=\
 $(foreach obj,$(BK_RELINK_LIBOBJ),$(dir $(obj)).libs/$(subst $(OBJEXT),.$(OBJEXT_CONFIG),$(notdir $(obj))))
else
BK_RELINK_LIBOBJ2=$(BK_RELINK_LIBOBJ)
endif
ifdef BK_RELINK_LIBSRC
BK_LARGE_LIBOBJ+=bk_relink_target.$(OBJEXT_CONFIG)
BK_LARGE_LIBOBJ2+=bk_relink_target.$(OBJEXT_CONFIG)

# It is possible that this will require libtool conversion
bk_relink_target.$(OBJEXT_CONFIG): $(BK_RELINK_LIBOBJ)
	$(LINK.c) -Xlinker -r -nostdlib -o $@ $(BK_RELINK_LIBOBJ2) $(BK_RELINKLIBS)
endif


# Even if target doesn't exist, $? may not contain all dependencies since
# vpath search may find installed version of static library that isn't quite
# up to date.  So make sure that new files get all dependencies.
$(filter %.a,$(BK_LARGE_LIB)): $(BK_LARGE_LIBOBJ)
ifeq ($(BK_WANT_LIBTOOL),true)
	@echo 1>&2 'Use of ".a" for libraries is deprecated; use "$$(LIBEXT)"'
endif
	@if [ -f $@ ]; then \
	  echo $(AR) $(ARFLAGS) $@ $?; \
	  $(AR) $(ARFLAGS) $@ $(BK_LARGE_LIBOBJ2); \
	else \
	  echo $(AR) $(ARFLAGS) $@ $^; \
	  $(AR) $(ARFLAGS) $@ $(BK_LARGE_LIBOBJ2); \
	fi
	$(RANLIB) $@

# We use a separate variable LT_LDLIBS to have better control over the run-time
# dependencies and object files that are linked into a shared library object.
# It is not used when linking programs.
#
# If we used LDLIBS for shared library linking, any referenced functions in .a
# archive libraries or .la libtool convenience libraries could be included in
# the generated shared library, potentially leading to different shared
# libraries having their own versions of functions (and their global/static
# variables, which is more problematic).
#
# Furthermore, when linking a shared library, *all* shared libraries referenced
# in the link line will be recorded as runtime dependencies, _even if no
# symbols from the library are used_.  Since LDLIBS contains libraries from all
# over the module tree, many of which are not relevant, it is unusable for
# shared library linking.
#
# Finally, in order to get warnings about undefined variables in modules and
# shared libraries (to confirm that LT_LDLIBS is complete) we run libtool with
# -no-undefined; however, this generates some errors due to dependencies on the
# worker program and aggregation plugin module, so we repeat without
# -no-undefined (effectively, these are warnings).
#
# <TODO bugid="1309">Fix those undefined errors, add -no-undefined to
# LT_LDFLAGS and LT_M_LDFLAGS, and clean up these rules.</TODO>
#
ifeq ($(BK_WANT_LIBTOOL),true)
$(filter %.la,$(BK_LARGE_LIB)): $(BK_LARGE_LIBOBJ)
	-@$(MKDIR) $(BK_INSTALLRDIR) >/dev/null 2>&1
	$(LIBTOOL_LINK) $(LINK.c) $(LT_LDFLAGS) -o $@ $^ $(LT_LDLIBS)	\
	 -rpath $(BK_INSTALLRPATH) -no-undefined $(BK_EXTERNAL_RPATH) || \
	  $(LIBTOOL_LINK) $(LINK.c) $(LT_LDFLAGS) -o $@ $^ $(LT_LDLIBS)	\
	   -rpath $(BK_INSTALLRPATH) $(BK_EXTERNAL_RPATH)

$(BK_LARGE_MODULE): $(BK_LARGE_LIBOBJ)
	-@$(MKDIR) $(BK_INSTALLRDIR) >/dev/null 2>&1
	$(LIBTOOL_LINK) $(LINK.c) $(LT_M_LDFLAGS) -o $@ $^ $(LT_LDLIBS) \
	 -rpath $(BK_INSTALLRPATH) -no-undefined ||			  \
	  $(LIBTOOL_LINK) $(LINK.c) $(LT_M_LDFLAGS) -o $@ $^ $(LT_LDLIBS) \
	   -rpath $(BK_INSTALLRPATH)
else
$(BK_LARGE_MODULE): $(BK_LARGE_LIBOBJ)
	@if [ -f $@ ]; then \
	  echo $(AR) $(ARFLAGS) $@ $?; \
	  $(AR) $(ARFLAGS) $@ $?; \
	else \
	  echo $(AR) $(ARFLAGS) $@ $^; \
	  $(AR) $(ARFLAGS) $@ $^; \
	fi
	$(RANLIB) $@
endif

#
# Java production
#

ifneq ($(strip $(BK_JAVADIR)),)

# Prevent make from deleting intermediate java and properties symlinks
.PRECIOUS: $(BK_JAVADIR)/$(BK_JAVA_PKG)/%

# Prevent make from trying to create foo.java from foo.java.c
.SUFFIXES: .class .java .properties .MF

# These two "pattern" rules will run the java compiler (once!) on entire groups
# of files, which is more efficient and reduces duplicated error messages, as
# implicitly compiled sources are only compiled once.  This isn't really a
# pattern rule, but if it weren't the rule would be invoked once for each
# target (which is totally redundant).  So we get hacky and replace the last
# part of the $(BK_JAVADIR) prefixed to each component of $(BK_JAVA_PKG_CLASS)
# and $(BK_JAVA_PKG_SRC) with the pseudo-stem % so that it appears to be a
# pattern rule.  Amazingly enough, it works, as long as you don't have a real
# pattern rule %.class: %.java that builds things one at a time.

# [This requires that $(BK_JAVADIR) cannot end with a / -- originally the
# pseudo-stem was the 'a' in .cl%ss and .j%va, but that prevented Seth from
# using a hidden .java directory for $(BK_JAVADIR).  Furthermore, if the last
# component of $(BK_JAVADIR) appears more than once in $(BK_JAVADIR) (e.g.
# BK_JAVADIR=.../.java/.java) the original failure mode due to multiple % will
# still occur.  Until GNU Make implements a $(firstsubst) function that only
# substitutes once, there appears to be no fix for this.]

# Note that you need to use $^ rather than $? so that all dependencies are
# listed; with $? only those .java files that are newer than the first
# out-of-date .class file will be regenerated, and the jar building stage will
# complain about missing .class files (but won't fail).

BK_JAVAPAT=$(subst $(notdir $(BK_JAVADIR)),%,$(BK_JAVADIR))

$(subst $(BK_JAVADIR),$(BK_JAVAPAT),$(BK_JAVA_PKG_CLASS)): \
		$(subst $(BK_JAVADIR),$(BK_JAVAPAT),$(BK_JAVA_PKG_SRC))
	@echo $(JAVAC) $(JAVACFLAGS) -cp "$(BK_JAVA_CPATH)" $(BK_JAVA_SRC)
	@$(JAVAC) $(JAVACFLAGS) -classpath "$(BK_JAVA_CPATH)" $^

$(subst $(BK_JAVADIR),$(BK_JAVAPAT),$(BK_JAVA_PKG_TCLASS)): \
		$(subst $(BK_JAVADIR),$(BK_JAVAPAT),$(BK_JAVA_PKG_TEST))
	@echo $(JAVAC) $(JAVACFLAGS) -cp "$(BK_JAVA_CPATH)" $(BK_JAVA_TEST)
	@$(JAVAC) $(JAVACFLAGS) -classpath "$(BK_JAVA_TESTCP)" $^

$(BK_JAVADIR)/$(BK_JAVA_PKG)/%: %
	@$(MKDIR) $(BK_JAVADIR)/$(BK_JAVA_PKG)
	@$(LN_S) -f $(PWD)/$< $@
	@test ! -L $@ && test ! $@ -ef $< 2>/dev/null && chmod -w $@ || true

$(BK_JAVADIR)/%: $(GROUPTOP)/$(LOCALE)/%
	@$(MKDIR) $(BK_JAVADIR)
	@$(LN_S) -f $(PWD)/$< $@
	@test ! -L $@ && test ! $@ -ef $< 2>/dev/null && chmod -w $@ || true

.SUFFIXES: .png .jpg .jpeg .gif

$(BK_JAVADIR)/%: $(GROUPTOP)/%
	@$(MKDIR) $(BK_JAVADIR)/$(IMAGES)
	@$(LN_S) -f $(PWD)/$< $@
	@test ! -L $@ && test ! $@ -ef $< 2>/dev/null && chmod -w $@ || true

# <TRICKY>This merges specific per-jar manifest header lines with generic
# defaults, then formats them to line width 72 with continuations, per spec
# <http://java.sun.com/j2se/1.4.2/docs/guide/jar/jar.html#JAR%20Manifest>
# Traditional fmt uses -p, GNU fmt rejects that as a bad prefix argument and
# uses -t for tagged paragraphs, so we figure out which we are getting.
# The insane sed line there reformats each header on a line by itself, with all
# values associated with it on continuation lines, and a closing empty line.
# (I did this to get GNU fmt crown-margin to work, it may not be necessary for
# tagged-paragraph, but I left it in for now).<TRICKY>
$(BK_JAVADIR)/%.MF: %.MF
	@$(MKDIR) $(BK_JAVADIR)/$(BK_JAVA_PKG)
	@# <WARNING>These must be sorted for join to work</WARNING>
	@{ CP='$(notdir $(subst :, ,$(BK_JAVA_CP)))';		 \
	   case $$CP in *.*) echo "Class-Path: $$CP" ;; esac;	 \
	   echo 'Implementation-Title: $(BK_JAVA_PKGDOT)';	 \
	   echo 'Implementation-Vendor: System Detection, Inc.'; \
	   echo "Implementation-Version: `date +%Y%m%d.%H%M`";	 \
	   echo 'Specification-Vendor: System Detection, Inc.';	 \
	   echo 'Specification-Version: 1.1';			 \
	 } > $@T
	@if fmt -p </dev/null 2>/dev/null; then C=p; else C=t; fi;     \
	 { set -e; echo 'Manifest-Version: 1.0';		       \
	   join -v1 -v2 -t: $@T $<;				       \
	   join -o2.1,2.2 -t: $@T $<; }				       \
	 | $(SED) '/^[^ ]/{x;p;g;s/:.*/: /;p;s/.*//;x;s/[^:]*: */ /;}' \
	 | fmt -$$C -w 72 | $(SED) -n /./p > $@

# JARFLAGS=-cifm causes java.io.IOException: invalid header field
# (so we run the indexing separately, after the file is created)
$(BK_JAVA_JAR): $(BK_JAVADIR)/$(BK_JAVA_MF) \
		$(BK_JAVA_PKG_SRC) $(BK_JAVA_PKG_CLASS) \
		$(BK_JAVA_PKG_AUX) $(BK_JAVA_PKG_LOCALE) $(BK_JAVA_PKG_IMAGES)
	@echo $(JAR) $(JARFLAGS) $@ $(BK_JAVA_MF) ...
	@cd $(BK_JAVADIR) &&				       \
	  $(JAR) $(JARFLAGS) $@ $(BK_JAVA_MF) $(BK_JAVA_CLASS) \
	    $(BK_JAVA_ICLASS)				       \
	    $(addprefix $(BK_JAVA_PKG)/,$(BK_JAVA_AUX))	       \
	    $(BK_JAVA_LOCALE) $(BK_JAVA_IMAGES)
	@echo $(JAR) -i $@
	@-cd $(BK_JAVADIR) && {						  \
	  for J in $(subst :, ,$(BK_JAVA_CP)); do $(LN_S) -f $$J .; done; \
	  $(JAR) -i $@ 2>/dev/null;					  \
	}
	$(CP) $(BK_JAVADIR)/$(BK_JAVA_JAR) $@

# Jtest productions

# Class test parameter generation rule; Jtest is only invoked if the .ctp file
# doesn't exist. "-run_only static_DBC" runs only the Design by Contract rules
# (just a few) so that we don't waste much time when generating the .ctp file
%.ctp: $(BK_JAVADIR)/$(BK_JAVA_PKG)/%.class
	@if [ -f $@ ]; then $(TOUCH) $@; else \
	$(JTEST) -nogui -gtp $(GROUPTOP)/$(PKGSUBDIR).gtp -ctp_new $@ \
	  -class_name $(BK_JAVA_PKGDOT).$* -cp "$(BK_JAVA_TESTCP)" \
	  -silent -run_only static_DBC > /dev/null 2>&1 \
	; fi

%.rpt: %.ctp
	@echo $(JTEST) $(JTESTOUT) $*; \
	 $(JTEST) -gtp $(GROUPTOP)/$(PKGSUBDIR).gtp -ctp $< \
	  -nogui -detail_report_html $*.htm > /dev/null 2>&1 \
	 || $(JTEST) -gtp $(GROUPTOP)/$(PKGSUBDIR).gtp -ctp $< -silent \
	     $(JTESTOUT) -detail_report_ascii $*.err > /dev/null 2>&1 \
	 || $(JTESTERR)
	@mv $*.htm $@

jtest-%: %.ctp
	$(JTEST) -gtp $(GROUPTOP)/$(PKGSUBDIR).gtp -ctp $< \
	 $(JTESTOUT) -detail_report_ascii $*.err > /dev/null 2>&1
endif
