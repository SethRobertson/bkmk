# -*- makefile -*-
#
#
#
# ++Copyright BAKA++
#
# Copyright Â© 2001-2011 The Authors. All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Send e-mail to <projectbaka@baka.org> for further information.
#
# - -Copyright BAKA- -
#
#
# Target rules--things people might want
#

#
# Top-level (meta-package) makefiles get an install target as their default
#
ifeq ($(PKGTOP),.)
ifneq ($(BK_WANT_DEFAULT),false)
default: all
all: install
BK_WANT_DEFAULT=false
endif
endif

#
# Sub-directory rule
#
ifeq ($(strip $(BK_ALL_SUBDIR)),)
BK_SUBDIRRULE= # No sub-directories
else # BK_SUBDIR
ifeq ($(strip $(BK_SUBDIRSHORTCUT)),)
BK_SUBDIRSHORTCUT=false
endif #!BK_SUBDIRSHORTCUT
BK_SUBDIRRULE=@								     \
	for d in $(BK_ALL_SUBDIR) strict_sh_fodder; do			     \
	 if [ $$d = "strict_sh_fodder" ]; then				     \
		continue;						     \
	 fi;								     \
	 if [ ! -f $$d/GNUmakefile -a \( ! -f $$d/Makefile -o		     \
	      -f $$d/GNUmakefile.in \) -a -f "$$d/${SpecialConfigure}" -a    \
	      -x "$$d/${SpecialConfigure}" ] ; then			     \
	  CFLAGS="$(CFLAGS)" CC="$(CC)" BK_INSTALLBASE="$(BK_INSTALLDIR)"    \
	   $$d/${SpecialConfigure} ||					     \
	  { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; }  \
	 fi;								     \
	 if [ -f $$d/GNUmakefile -o					     \
	     \( -f $$d/Makefile -a ! -f $$d/GNUmakefile.in \) ]; then	     \
	  PWD=$$PWD/$$d $(MAKE) -C $$d $@ || $(BK_SUBDIRSHORTCUT) ||	     \
	   { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; } \
	 fi;								     \
	done; exit $$ERR
endif # BK_SUBDIR

ifneq ($(BK_WANT_DEFAULT),false)
#
# Default rule--standard target to compile everything
#
default install actual_install:: $(BK_REALTOP)/bkmk/.timestamp

default::
	$(BK_SUBDIRRULE)

ifneq ($(strip $(BK_WANT_C)),false)
default:: $(BK_LOCALTARGETS) $(BK_GROUPTARGETS) $(BK_PACKAGETARGETS) $(BK_LARGE_LIB) $(BK_LARGE_MODULE) $(BK_LARGE_INTERNALLIB) $(BK_SIMPLE_PROGS) $(BK_LARGE_PROG) $(BK_SIMPLE_INTERNALPROGS) $(BK_LARGE_INTERNALPROG)
endif # BK_WANT_C

ifneq ($(strip $(BK_WANT_JAVA)),false)
default:: $(BK_JAVA_JAR)
ifneq ($(strip $(BK_WANT_HELP)),false)
ifneq ($(strip $(BK_JAVA_HELP)),)
ifneq ($(strip $(BK_JAVA_HELP_LANG)),)
default:: help
endif # BK_JAVA_HELP_LANG
endif # BK_JAVA_HELP
endif # BK_WANT_HELP
endif # BK_WANT_JAVA
endif # BK_WANT_DEFAULT



#
# Get rid of stuff including stuff that might be valuable (e.g. autosave files, etc)
#
ifneq ($(strip $(BK_NUKE_OVERRIDE)),true)
nuke::
	$(BK_SUBDIRRULE)
	$(RRM) -- $(BK_NUKESTUFF)
endif # BK_NUKE_OVERRIDE


# This "user discretion" rule allows you to put a local_rule:: rule in any
# subdirectory, type make local_rule at the top and have the rule expand in
# the local directory. At the very least this is very useful for
# discovering variables which expand to one value if make is invoked in the
# directory in which the variables is used but to a different value if make
# is invoked at the top.
local_rule::
	$(BK_SUBDIRRULE)

#
# Get rid of stuff that can be regenerated or is just stupid, including .depend files
#
clean::
	$(BK_SUBDIRRULE)
	$(RRM) -- $(BK_CLEANSTUFF)


#
# Get rid of stuff that can be regenerated or is just stupid, excluding .depend files
#
neat::
	$(BK_SUBDIRRULE)
	$(RRM) -- $(BK_NEATSTUFF)


#
# Preprocess
#
preprocess:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC)
preprocess:: $(patsubst %.c,%.i,$(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC))


#
# Dependency generation
#
depend:: nukedepend

nukedepend::
	$(RM) .depend

# If a Makefile will not work without a depend file, use a rule for building
# .depend directly.  There can only be one of these, so we cannot use a double
# colon rule.  Fortunately, only Java help file generation requires this now.

ifneq ($(strip $(BK_WANT_JAVA)),false)
ifneq ($(strip $(BK_WANT_HELP)),false)
ifneq ($(strip $(BK_JAVA_HELP)),)
ifneq ($(strip $(BK_JAVA_HELP_LANG)),)
depend:: dotdepend

.SUFFIXES: .jhm .html .xml

dotdepend .depend: $(foreach HLANG,$(BK_JAVA_HELP_LANG),$(HLANG)/Map.jhm)
	for L in $(BK_JAVA_HELP_LANG); do \
	  echo $(ECHO_N) "$(BK_JAVA_HELP)_$$L.jar: $(ECHO_C)"; \
	  $(BK_INSTALLPROGDIR)/buildhelp -l $(BK_JAVA_HELP) $$L/Map.jhm; \
	  echo ""; \
	  echo $(ECHO_N) "$(BK_JAVA_HELP)_$$L.pdf: $(ECHO_C)"; \
	  $(BK_INSTALLPROGDIR)/buildhelp -l $(BK_JAVA_HELP) $$L/Map.jhm; \
	  echo ""; \
	done > .depend

ifneq ($(strip $(BK_NUKE_OVERRIDE)),true)
nuke::
	for L in $(BK_JAVA_HELP_LANG); do	      \
	  $(RM) `$(BK_INSTALLPROGDIR)/buildhelp -r $(BK_JAVA_HELP) $$L/Map.jhm`; \
	done
	$(RM) $(BK_JAVA_HELP_JAR) $(BK_JAVA_HELP_PDF)
endif # BK_NUKE_OVERRIDE
endif # BK_JAVA_HELPLANG
endif # BK_JAVA_HELP
endif # BK_WANT_HELP
endif # BK_WANT_JAVA

ifneq ($(strip $(BK_WANT_C)),false)
ifneq ($(strip $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERDEPS)),)
depend:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERDEPS)
	$(MKDEP) $^ | $(SED) -e 's/\([^:]*\)\.o: /\1.o \1$(OBJEXT): /' >> .depend

# avoid lots of useless chaining (to RCS, SCCS, etc.) on installed header files
ifeq ($(findstring /usr,$(BK_INSTALLINCDIR)),)
/usr/%.h:
	@
endif

endif # We Have Source
endif # BK_WANT_C

depend::
	$(BK_SUBDIRRULE)


#
# Multi-architecture support
#
ifneq ($(strip $(PKGSUBDIR)),)
build::
	-d=BUILD/$(BK_ARCHNAME); (ls ./Make*; $(FIND) $(BK_ALL_SUBDIR) -name Make\* -print) | while read f; do $(MKDIR) $$d/`dirname $$f`; $(LN_S) $(PWD)/$$f $$d/$$f; done
	@echo "To compile: cd BUILD/$(BK_ARCHNAME) and type make"
endif # PKGSUBDIR


#
# Installation support
#
ifeq ($(BK_ONE_PASS_INSTALL),true)

install:: actual_install

actual_install::
	$(BK_SUBDIRRULE)

else

install:: install-first install-normal install-last

install-first:: install-first-subdir
install-first-subdir:
	@for d in $(BK_ALL_FIRST_DIRS) strict_sh_fodder;		      \
	do								      \
	  if [ $$d = "strict_sh_fodder" ]; then				      \
		continue;						      \
	  fi;								      \
	  if [ ! -f $$d/GNUmakefile -a \( ! -f $$d/Makefile -o		      \
	       -f $$d/GNUmakefile.in \) -a -f "$$d/${SpecialConfigure}" -a    \
	       -x "$$d/${SpecialConfigure}" ] ; then			      \
	   CFLAGS="$(CFLAGS)" CC="$(CC)" BK_INSTALLBASE="$(BK_INSTALLDIR)"    \
	    $$d/${SpecialConfigure} ||					      \
	   { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; }  \
	  fi;								      \
	  if [ -f $$d/Makefile -o -f $$d/GNUmakefile ]; then		      \
	    PWD=$$PWD/$$d $(MAKE) -C $$d actual_install ||		      \
	    { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; } \
	  fi;								      \
	done;								      \
	for d in $(BK_SUBDIR) $(BK_ALL_LAST_DIRS) strict_sh_fodder;	      \
	do								      \
	  if [ $$d = "strict_sh_fodder" ]; then				      \
		continue;						      \
	  fi;								      \
	  if [ ! -f $$d/GNUmakefile -a \( ! -f $$d/Makefile -o		      \
	       -f $$d/GNUmakefile.in \) -a -f "$$d/${SpecialConfigure}" -a    \
	       -x "$$d/${SpecialConfigure}" ] ; then			      \
	   CFLAGS="$(CFLAGS)" CC="$(CC)" BK_INSTALLBASE="$(BK_INSTALLDIR)"    \
	    $$d/${SpecialConfigure} ||					      \
	   { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; }  \
	  fi;								      \
	  if [ -f $$d/Makefile -o -f $$d/GNUmakefile ]; then		      \
	    PWD=$$PWD/$$d $(MAKE) -C $$d $@ ||				      \
	    { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; } \
	  fi;								      \
	done; exit $$ERR

install-normal:: install-normal-subdir
install-normal-subdir: | install-first-subdir
	@for d in $(BK_SUBDIR) strict_sh_fodder;			      \
	do								      \
	  if [ $$d = "strict_sh_fodder" ]; then				      \
		continue;						      \
	  fi;								      \
	  if [ ! -f $$d/GNUmakefile -a \( ! -f $$d/Makefile -o		      \
	       -f $$d/GNUmakefile.in \) -a -f "$$d/${SpecialConfigure}" -a    \
	       -x "$$d/${SpecialConfigure}" ] ; then			      \
	   CFLAGS="$(CFLAGS)" CC="$(CC)" BK_INSTALLBASE="$(BK_INSTALLDIR)"    \
	    $$d/${SpecialConfigure} ||					      \
	   { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; }  \
	  fi;								      \
	  if [ -f $$d/Makefile -o -f $$d/GNUmakefile ]; then		      \
	    PWD=$$PWD/$$d $(MAKE) -C $$d $@ ||				      \
	    { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; } \
	    fi;								      \
	  done;								      \
	$(MAKE) actual_install && exit $$ERR

install-last:: install-last-subdir
install-last-subdir:: | install-normal-subdir
	@for d in $(BK_ALL_LAST_DIRS) strict_sh_fodder;			      \
	do								      \
	  if [ $$d = "strict_sh_fodder" ]; then				      \
		continue;						      \
	  fi;								      \
	  if [ ! -f $$d/GNUmakefile -a \( ! -f $$d/Makefile -o		      \
	       -f $$d/GNUmakefile.in \) -a -f "$$d/${SpecialConfigure}" -a    \
	       -x "$$d/${SpecialConfigure}" ] ; then			      \
	   CFLAGS="$(CFLAGS)" CC="$(CC)" BK_INSTALLBASE="$(BK_INSTALLDIR)"    \
	    $$d/${SpecialConfigure} ||					      \
	   { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; }  \
	  fi;								      \
	  if [ -f $$d/Makefile -o -f $$d/GNUmakefile ]; then		      \
	    PWD=$$PWD/$$d $(MAKE) -C $$d actual_install ||		      \
	    { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; } \
	  fi;								      \
	done;								      \
	for d in $(BK_SUBDIR) $(BK_ALL_FIRST_DIRS) strict_sh_fodder;	      \
	do								      \
	  if [ $$d = "strict_sh_fodder" ]; then				      \
		continue;						      \
	  fi;								      \
	  if [ -f $$d/Makefile -o -f $$d/GNUmakefile ]; then		      \
	    PWD=$$PWD/$$d $(MAKE) -C $$d $@ ||				      \
	    { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; } \
	  fi;								      \
	done; exit $$ERR
endif

ifeq ($(strip $(BK_WANT_JAVA)),false)
BK_JAVA_JAR=
BK_JAVA_HELP_JAR=
BK_JAVA_HELP_PDF=
endif # BK_WANT_JAVA

ifeq ($(strip $(BK_WANT_C)),false)
BK_LARGE_LIB=
BK_LARGE_MODULE=
BK_SIMPLE_PROGS=
BK_LARGE_PROG=
BK_PUBLIC_INC=
BK_MAN=
endif # BK_WANT_C

#
# <TRICKY>Due to vpath %$(LIBEXT) $(BK_LIBDIR) in Make.variables, the
# dependency on $(BK_LARGE_LIB) may actually refer to the installed library (if
# it is up to date w.r.t. the component .o files).</TRICKY>
#
actual_install:: $(BK_INSTALLRDIR)/$(notdir $(BK_LARGE_LIB))

$(BK_INSTALLRDIR)/$(notdir $(BK_LARGE_LIB)): $(BK_LARGE_LIB)
ifneq ($(strip $(BK_INSTALLLIBDIR)),)
ifneq ($(strip $(BK_LARGE_LIB)),)
ifneq ($(filter %.la,$(BK_LARGE_LIB)),)
	-@$(MKDIR) $(BK_INSTALLRDIR) >/dev/null 2>&1
	@# deal with VPATH insanity; this may need to link before installing if
	@# make considers the link target "the same file as" the install target
	@# and uses this rule only (ignoring the one in Make.production).
	@case "$^" in							    \
	  *.la) L="$^" ;;						    \
	  *) echo $(LIBTOOL_LINK) $(LINK.c) $(LT_LDFLAGS) -o $(@F) $^	    \
	       $(LT_LDLIBS) -rpath $(BK_INSTALLRPATH) $(BK_EXTERNAL_RPATH); \
	     $(LIBTOOL_LINK) $(LINK.c) $(LT_LDFLAGS) -o $(@F) $^	    \
	       $(LT_LDLIBS) -rpath $(BK_INSTALLRPATH) $(BK_EXTERNAL_RPATH); \
	     L="$(@F)" ;;						    \
	esac;								    \
	if [ "$^" != "$(addprefix $(BK_INSTALLRDIR)/,$(^F))" ]; then	    \
	  echo $(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_LIBFLAGS) $$L	    \
	    $(BK_INSTALLRDIR);						    \
	  $(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_LIBFLAGS) $$L		    \
	    $(BK_INSTALLRDIR);						    \
	fi
else # non-libtool installation without absolute path
	@if [ "$^" != "$(addprefix $(BK_INSTALLLIBDIR)/,$(^F))" ]; then \
	  echo $(MKDIR) $(BK_INSTALLLIBDIR);			       \
	  $(MKDIR) $(BK_INSTALLLIBDIR);				       \
	  echo $(INSTALL) $(INSTALL_LIBFLAGS) $^ $(BK_INSTALLLIBDIR);  \
	  $(INSTALL) $(INSTALL_LIBFLAGS) $^ $(BK_INSTALLLIBDIR);       \
	fi
endif
endif # BK_LARGE_LIB
endif # BK_INSTALLLIBDIR

actual_install:: $(BK_INSTALLRDIR)/$(notdir $(BK_LARGE_MODULE))

$(BK_INSTALLRDIR)/$(notdir $(BK_LARGE_MODULE)): $(BK_LARGE_MODULE)
ifneq ($(strip $(BK_INSTALLLIBDIR)),)
ifneq ($(strip $(BK_LARGE_MODULE)),)
	-@$(MKDIR) $(BK_INSTALLRDIR) >/dev/null 2>&1
	$(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_LIBFLAGS) $^ $(BK_INSTALLRDIR)

endif # BK_LARGE_MODULE
endif # BK_INSTALLLIBDIR

actual_install:: $(BK_SIMPLE_PROGS) $(BK_SIMPLE_SCRIPTS) $(BK_PERL_LIBS) $(BK_LARGE_PROG) $(BK_JAVA_JAR) $(BK_JAVA_HELP_JAR) $(BK_JAVA_HELP_PDF) $(BK_PUBLIC_INC) $(BK_DATAFILES) $(BK_MAN)
ifneq ($(strip $(BK_INSTALLPROGDIR)),)
	$(MKDIR) $(BK_INSTALLPROGDIR)
ifneq ($(strip $(BK_SIMPLE_PROGS)),)
	$(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_BINFLAGS) $(BK_SIMPLE_PROGS) $(BK_INSTALLPATH)
endif # BK_SIMPLE_PROGS
ifneq ($(strip $(BK_SIMPLE_SCRIPTS)),)
	$(INSTALL) $(INSTALL_BINFLAGS) $(BK_SIMPLE_SCRIPTS) $(BK_INSTALLPROGDIR)
endif # BK_SIMPLE_SCRIPTS
# Files listed in BK_PERL_LIBS are installed in the base perl install directory
ifneq ($(strip $(BK_PERL_LIBS)),)
	$(MKDIR) $(BK_INSTALLPERLDIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_PERL_LIBS) $(BK_INSTALLPERLDIR)
endif # BK_PERL_LIBS
# Files in BK_PERL_MODS retain their relative paths in the perl install directory
ifneq ($(strip $(BK_PERL_MODS)),)
	$(MKDIR) $(addprefix $(BK_INSTALLPERLDIR)/, $(dir $(BK_PERL_MODS))); \
	for d in $(BK_PERL_MODS); \
	  do $(INSTALL) $(INSTALL_OTHERFLAGS) $$d $(BK_INSTALLPERLDIR)/$$d; \
	done; exit $$ERR
endif # BK_PERL_MODS
ifneq ($(strip $(BK_LARGE_PROG)),)
	$(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_BINFLAGS) $(BK_LARGE_PROG) $(BK_INSTALLPATH)
endif # BK_LARGE_PROG
endif # BK_INSTALLPROGDIR
ifneq ($(strip $(BK_WANT_JAVA)),false)
ifneq ($(strip $(BK_INSTALLJAVADIR)),)
ifneq ($(strip $(BK_JAVA_JAR)),)
	$(MKDIR) $(BK_INSTALLJAVADIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_JAVA_JAR) $(BK_INSTALLJAVADIR)
endif # BK_JAVA_JAR
ifneq ($(strip $(BK_JAVA_HELP)),)
	$(INSTALL) $(INSTALL_OTHERFLAGS) \
	  $(BK_JAVA_HELP)_$(BK_JAVA_HELP_LANG).jar \
	  $(BK_INSTALLJAVADIR)
	$(MKDIR) $(BK_INSTALLDOCDIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) \
	  $(BK_JAVA_HELP)_$(BK_JAVA_HELP_LANG).pdf \
	  $(BK_INSTALLDOCDIR)
endif # BK_JAVA_HELP
endif # BK_INSTALLJAVADIR
endif # BK_WANT_JAVA
ifneq ($(strip $(BK_INSTALLINCDIR)),)
ifneq ($(strip $(BK_PUBLIC_INC)),)
	$(MKDIR) $(BK_INSTALLINCDIR)
	$(INSTALL) $(INSTALL_INCFLAGS) $(BK_PUBLIC_INC) $(BK_INSTALLINCDIR)
endif # BK_PUBLIC_INC
endif # BK_INSTALLINCDIR
ifneq ($(strip $(BK_INSTALLDATADIR)),)
ifneq ($(strip $(BK_DATAFILES)),)
	$(MKDIR) $(BK_INSTALLDATADIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_DATAFILES) $(BK_INSTALLDATADIR)
endif # BK_DATAFILES
endif # BK_INSTALLDATADIR
ifneq ($(strip $(BK_INSTALLARCHIVEDIR)),)
ifneq ($(strip $(BK_ARCHIVEFILES)),)
	$(MKDIR) $(BK_INSTALLARCHIVEDIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_ARCHIVEFILES) $(BK_INSTALLARCHIVEDIR)
endif # BK_DATAFILES
endif # BK_INSTALLDATADIR
ifneq ($(strip $(BK_INSTALLCONFIGDIR)),)
ifneq ($(strip $(BK_CONFIGFILES)),)
	$(MKDIR) $(BK_INSTALLCONFIGDIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_CONFIGFILES) $(BK_INSTALLCONFIGDIR)
endif # BK_CONFIGFILES
endif # BK_INSTALLCONFIGDIR
ifneq ($(strip $(BK_INSTALLMANDIR)),)
ifneq ($(strip $(_BK_MAN1)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man1
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN1) $(BK_INSTALLMANDIR)/man1
endif # _BK_MAN1
ifneq ($(strip $(_BK_MAN3)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man3
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN3) $(BK_INSTALLMANDIR)/man3
endif # _BK_MAN3
ifneq ($(strip $(_BK_MAN5)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man5
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN5) $(BK_INSTALLMANDIR)/man5
endif # _BK_MAN5
ifneq ($(strip $(_BK_MAN8)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man8
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN8) $(BK_INSTALLMANDIR)/man8
endif # _BK_MAN8
endif # BK_INSTALLMANDIR
ifneq ($(strip $(BK_REPLICATE)),)
	$(MKDIR) $(BK_REPLICATEDIR)
	$(TAR) cf - $(addprefix --exclude ,$(BK_EXCLUDE)) $(BK_REPLICATE) | \
	 (cd $(BK_REPLICATEDIR); umask 02; $(TAR) xf -)
endif # BK_REPLICATE

#
# Tags support
#
nukeetags::
	> TAGS

nukectags::
	> tags

# We use /bin/pwd here rather than $(PWD) since we *want* the ugly automounter
# path, as that is what [ec]tags sees and uses to compute relative pathnames.
# <TRICKY>Use "-quotes around TAGOUT so that `-quotes are eval'd here.</TRICKY>
etags:: nukeetags
	$(MAKE) 'BK_SUBDIRSHORTCUT=true' 'TAGCMD=$(ETAGS)' "TAGOUT=`/bin/pwd`/TAGS" subtags

ctags:: nukectags
	$(MAKE) 'BK_SUBDIRSHORTCUT=true' 'TAGCMD=$(CTAGS)' "TAGOUT=`/bin/pwd`/tags" subtags

# easy enough to confuse - *don't* use this target for cvs tagging
tag: tags

tags:: etags

subtags:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_PUBLIC_INC) $(BK_JAVA_SRC) $(BK_LOCAL_OTHERTAGS)
	if [ "$^" ]; then $(TAGCMD) -a -o $(TAGOUT) $(patsubst %,$(PWD)/%,$^); fi
	$(BK_SUBDIRRULE)

#
# XML lint support
#
XMLLINT=xmllint
XMLLINTCHECK=--valid
AWB_XMLLINTFILES=$(AWB_FSETFILES) $(AWB_JOBFILES) $(AWB_MODELFILES)

xmllint: $(AWB_XMLLINTFILES)
	@ERR=0;							     \
	for X in $(AWB_XMLLINTFILES);				     \
	do							     \
	  if $(XMLLINT) --noout $(XMLLINTCHECK) $$X; then	     \
	    echo $$X;						     \
	  else							     \
	    ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) break ;; esac; \
	  fi;							     \
	done; exit $$ERR

#
# Xref support
#
USERXREFRC=$(HOME)/.xrefrc
TMPXREFRC=/tmp/$(shell basename $(USERXREFRC)).$USER.bkmk-tmp
ALTPWD=$(shell . $(BKMKDIR)/getcwd.sh 2>/dev/null; pawd `/bin/pwd`)
xref::
	@echo "Regenerating $(USERXREFRC) for $(PWD)";
	@$(PERL) -ne '/BEGIN\sBK\-GEN\:\s$$ENV{PWD}/ && ($$cut=1); print unless ($$cut == 1); /END\sBK\-GEN\:\s$$ENV{PWD}/ && ($$cut=0);' $(USERXREFRC) > $(TMPXREFRC) && cat $(TMPXREFRC) > $(USERXREFRC) && rm $(TMPXREFRC)
	@echo "// BEGIN BK-GEN: $(PWD)" >> $(USERXREFRC); \
	echo "[$(PWD):$(ALTPWD):`/bin/pwd`]" >> $(USERXREFRC); \
	echo "// dynamic listing of files to include" >> $(USERXREFRC); \
	echo "\`$(FIND) $(PWD)/ -type f \( -name \*.[chyls] -o -name \*.java \) -not \( -path \*$(BK_JAVADIR)\* -o -path \*$$(basename $(BK_INSTALLBASE))\* \)\`" >> $(USERXREFRC); \
	echo "-refs $(PWD)/.xrefs" >> $(USERXREFRC); \
	echo "-refnum=100" >> $(USERXREFRC); \
	echo "// automatically generated include directories" >> $(USERXREFRC); \
	echo `( for f in $$($(FIND) $(PWD)/ -type f -name \*.h -not -path \*$$(basename $(BK_INSTALLBASE))\*); do echo "-I $$(dirname $$f)"; done ) | sort -u` >> $(USERXREFRC); \
	echo "// END BK-GEN: $(PWD)" >> $(USERXREFRC);
	@echo "$(XREF) -p $(PWD)";
	@$(XREF) -p $(PWD) > /dev/null 2>&1

#
# Test support
#
ifneq ($(strip $(BK_WANT_JAVA)),false)
test:: $(BK_JAVA_PKG_SRC) $(BK_JAVA_PKG_CLASS) \
       $(BK_JAVA_PKG_AUX) $(BK_JAVA_PKG_LOCALE) \
       $(BK_JAVA_PKG_TEST) $(BK_JAVA_PKG_TCLASS)
	$(BK_SUBDIRRULE)

ifneq ($(strip $(BK_JAVA_SRC)),)
test:: jtest

JTEST_HOST=winwood
ifeq ($(shell hostname),$(JTEST_HOST))
jtest: $(BK_JAVA_JTEST)
else
jtest:
	@echo Jtest can only be run on $(JTEST_HOST)
endif # JTEST_HOST
endif # BK_JAVA_SRC
endif # BK_WANT_JAVA

#
# Doxygen support
#
BK_SUBDOX=$(BK_ALL_SUBDIR)
BK_DOXDIRS=$(foreach DIR, $(BK_SUBDOX), $(BK_REALTOP)/$(DIR))
BK_REALMANDIR=$(BK_REALTOP)/$(BK_INSTALLMANDIR)
$(BK_INSTALLDOCDIR)/doxygen/Doxyfile:
	@if [ "" = "$(BK_INSTALLDOCDIR)" ]; then \
	  echo "\$$BK_INSTALLDOCDIR not set in Make.preinstall"; exit 1;\
	fi
	-@$(MKDIR) $(BK_INSTALLDOCDIR)/doxygen 2>/dev/null && \
	$(MKDIR) $(BK_INSTALLMANDIR)/man3 2>/dev/null && \
	 { THIS_TOPDIR=$(PWD); cd $(BK_INSTALLDOCDIR)/doxygen; \
	   $(DOXYGEN) -g > /dev/null;	 \
	   $(MV) Doxyfile Doxyfile.orig && \
	   $(SED) -e '/^PROJECT_NAME/s%=.*%= $(BK_PKGNAME)%' \
	      -e '/^OUTPUT_DIR/s%=.*%= $(BK_INSTALLDOCDIR)/doxygen%' \
	      -e '/^MAN_OUT/s%=.*%= $(BK_REALMANDIR)%' \
	      -e '/^INPUT[ \t]/s%=.*%= $(BK_DOXDIRS)%' \
	      -e '/^FILE_PATTERNS/s%=.*%= *.[chyls] *.java%' \
	      -e '/^GENERATE_MAN[ \t]/s%=.*%= YES%' \
	      -e '/^RECURSIVE[ \t]/s%=.*%= YES%' \
	      -e '/^EXCLUDE_PATTERNS/s%=.*%= *Test Test*%' \
	      -e '/^EXTRACT_STATIC/s%=.*%= YES%' \
	      -e '/^JAVADOC_AUTOBRIEF/s%=.*%= YES%' \
	      -e '/^ALPHABETICAL_INDEX/s%=.*%= YES%' \
	      -e '/^HAVE_DOT/s%=.*%= $(HAVE_DOT)%' \
	    < Doxyfile.orig > Doxyfile && \
	   $(ECHO) 'Please verify $(BK_INSTALLDOCDIR)/doxygen/Doxyfile'; \
	 }

# Since this target depends not just on its configuration file (Doxyfile)
# but also on the *entire* source distribution which it covers, we just
# rebuild the database each time (i.e. we never make a "doxygen" file so the
# target "doxygen" is always out of date.  If this gets too odious for words
# then we can break the dependency of viewdox on doxygen and leave it up to
# the user to type "make doxygen" from time to time in order to update his
# database.
doxygen: $(BK_INSTALLDOCDIR)/doxygen/Doxyfile
	-@$(ECHO) "Rebuilding doxygen database in $(BK_INSTALLDOCDIR)/doxygen"
	$(RM) -r $(BK_INSTALLDOCDIR)/doxygen/[a-z]*
	$(DOXYGEN) $(BK_INSTALLDOCDIR)/doxygen/Doxyfile \
	 > $(BK_INSTALLDOCDIR)/doxygen/.lastbuild 2>&1

viewdox: doxygen
	-@$(ECHO) "Starting $(BROWSER)...."; \
	  URL="$(BK_INSTALLDOCDIR)/doxygen/html/index.html"; \
	  case "$(BROWSER)$$DISPLAY" in \
	    *netscape*:*) \
	       $(BROWSER) -remote "OpenURL(file:$(PWD)/$$URL,new-window)" \
		&& exit 0 ;; \
	  esac; \
	  $(BROWSER) file:$(PWD)/$$URL


#
# Generate Help Documentation
#
ifneq ($(strip $(BK_WANT_JAVA)),false)
ifneq ($(strip $(BK_WANT_HELP)),false)
ifneq ($(strip $(BK_JAVA_HELP)),)
ifneq ($(strip $(BK_JAVA_HELP_LANG)),)

help: $(patsubst %, $(BK_JAVA_HELP)_%.jar, $(BK_JAVA_HELP_LANG)) \
	$(patsubst %, $(BK_JAVA_HELP)_%.pdf, $(BK_JAVA_HELP_LANG))

$(BK_JAVA_HELP)_%.jar: %/Map.jhm
	$(BK_INSTALLPROGDIR)/buildhelp $(BK_JAVA_HELP) $<

$(BK_JAVA_HELP)_%.pdf: %/Map.jhm
	$(BK_INSTALLPROGDIR)/buildhelp $(BK_JAVA_HELP) $<

endif # BK_JAVA_HELP_LANG
endif # BK_JAVA_HELP
endif # BK_WANT_HELP
endif # BK_WANT_JAVA

# targets to avoid complaints about missing make includes
$(BKMKDIR)/Make.$(BK_OSNAME)-pre:
$(BKMKDIR)/Make.$(BK_OSNAME)-post:
$(GROUPTOP)/$(PKGTOP)/.user-variables:

# Allow on-the-fly configure during a `make clean default`
$(BK_REALTOP)/bkmk/.timestamp:
	PWD=$$PWD/$$d $(MAKE) -C $(BK_REALTOP)/bkmk .timestamp

#
# Prevent targets from being files
#
.PHONY :
	DEFAULT					\
	actual_install				\
	all					\
	build					\
	clean					\
	ctags					\
	default					\
	depend					\
	dotdepend				\
	doxygen					\
	etags					\
	help					\
	install					\
	install-first				\
	install-first-subdir			\
	install-last				\
	install-last-subdir			\
	install-normal				\
	install-normal-subdir			\
	jtest					\
	local_rule				\
	neat					\
	nuke					\
	nukectags				\
	nukedepend				\
	nukeetags				\
	preprocess				\
	subtags					\
	tag					\
	tags					\
	test					\
	viewdox					\
	xmllint					\
	xref					\
# Line eater fodder
