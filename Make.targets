# $Id: Make.targets,v 1.10 2001/09/07 19:54:31 seth Exp $
#
# ++Copyright LIBBK++
#
# Copyright (c) 2001 The Authors.  All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Mail <projectbaka@baka.org> for further information
#
# --Copyright LIBBK--
#
#
# Target rules--things people might want
#

#
# Sub-directory rule
#
ifeq ($(strip $(BK_SUBDIR)),)
BK_SUBDIRRULE= # No sub-directories
else # BK_SUBDIR
BK_SUBDIRRULE=@BK_SUBDIR="${BK_SUBDIR}"; if [ -n "$$BK_SUBDIR" ]; then for d in $$BK_SUBDIR; do (cd $$d && $(MAKE) $(MFLAGS) $@) || exit $$?; done; fi
endif # BK_SUBDIR


#
# Default rule--standard target to compile everything
#
default::
	$(BK_SUBDIRRULE)	

default:: $(BK_LOCALTARGETS) $(BK_GROUPTARGETS) $(BK_PACKAGETARGETS) $(BK_LARGE_LIB) $(BK_LARGE_INTERNALLIB) $(BK_SIMPLE_PROGS) $(BK_LARGE_PROG) $(BK_SIMPLE_INTERNALPROGS) $(BK_LARGE_INTERNALPROG)


#
# Get rid of stuff including stuff that might be valuable (e.g. autosave files, etc)
#
nuke::
	$(RRM) -- $(BK_NUKESTUFF)
	$(BK_SUBDIRRULE)	


#
# Get rid of stuff that can be regenerated or is just stupid, including .depend files
#
clean::
	$(RRM) -- $(BK_CLEANSTUFF)
	$(BK_SUBDIRRULE)	


#
# Get rid of stuff that can be regenerated or is just stupid, excluding .depend files
#
neat::
	$(RRM) -- $(BK_NEATSTUFF)
	$(BK_SUBDIRRULE)	


#
# Preprocess
#
preprocess:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC)
preprocess:: $(patsubst %.c,%.i,$(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC))


#
# Dependency generation
#
nukedepend::
	> .depend

ifneq ($(strip $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERDEPS)),)
depend:: nukedepend
depend:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERDEPS)
	$(MKDEP) $^ >> .depend
endif # We Have Source

depend::
	$(BK_SUBDIRRULE)


#
# Multi-architecture support
#
ifneq ($(strip $(PKGSUBDIR)),)
build::
	-d=BUILD/$(BK_ARCHNAME); (ls ./Make*; find $(BK_SUBDIR) -name Make\* -print) | while read f; do mkdir -p $$d/`dirname $$f`; ln -s `pwd`/$$f $$d/$$f; done
	@echo "To compile: cd BUILD/$(BK_ARCHNAME) and type make"
endif # PKGSUBDIR


#
# Installation support
#
install::
	$(BK_SUBDIRRULE)

install:: $(BK_LARGE_LIB) $(BK_SIMPLE_PROGS) $(BK_LARGE_PROG) $(BK_PUBLIC_INC) $(BK_DATAFILES) $(BK_MAN)
ifneq ($(strip $(BK_INSTALLPROGDIR)),)
ifneq ($(strip $(BK_SIMPLE_PROGS)),)
	$(MKDIR) $(BK_INSTALLPROGDIR)
	$(INSTALL) $(INSTALL_BINFLAGS) $(BK_SIMPLE_PROGS) $(BK_INSTALLPROGDIR)
endif # BK_SIMPLE_PROGS
ifneq ($(strip $(BK_LARGE_PROG)),)
	$(MKDIR) $(BK_INSTALLPROGDIR)
	$(INSTALL) $(INSTALL_BINFLAGS) $(BK_LARGE_PROG) $(BK_INSTALLPROGDIR)
endif # BK_LARGE_PROG
endif # BK_INSTALLPROGDIR
ifneq ($(strip $(BK_INSTALLLIBDIR)),)
ifneq ($(strip $(BK_LARGE_LIB)),)
	$(MKDIR) $(BK_INSTALLLIBDIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_LARGE_LIB) $(BK_INSTALLLIBDIR)
	$(RANLIB) $(BK_LARGE_LIB)
endif # BK_LARGE_LIB
endif # BK_INSTALLLIBDIR
ifneq ($(strip $(BK_INSTALLINCDIR)),)
ifneq ($(strip $(BK_PUBLIC_INC)),)
	$(MKDIR) $(BK_INSTALLINCDIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_PUBLIC_INC) $(BK_INSTALLINCDIR)
endif # BK_PUBLIC_INC
endif # BK_INSTALLINCDIR
ifneq ($(strip $(BK_INSTALLDATADIR)),)
ifneq ($(strip $(BK_DATAFILES)),)
	$(MKDIR) $(BK_INSTALLDATADIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_DATAFILES) $(BK_INSTALLDATADIR)
endif # BK_DATAFILES
endif # BK_INSTALLDATADIR
ifneq ($(strip $(BK_INSTALLMANDIR)),)
ifneq ($(strip $(_BK_MAN1)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man1
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN1) $(BK_INSTALLMANDIR)/man1
endif # _BK_MAN1
ifneq ($(strip $(_BK_MAN3)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man3
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN3) $(BK_INSTALLMANDIR)/man3
endif # _BK_MAN3
ifneq ($(strip $(_BK_MAN5)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man5
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN5) $(BK_INSTALLMANDIR)/man5
endif # _BK_MAN5
ifneq ($(strip $(_BK_MAN8)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man8
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN8) $(BK_INSTALLMANDIR)/man8
endif # _BK_MAN8
endif # BK_INSTALLMANDIR


#
# Tags support
#
nukeetags::
	> TAGS

nukectags::
	> tags

etags:: nukeetags
	$(MAKE) $(MFLAGS) TAGCMD=$(ETAGS) TAGOUT=$(CURDIR)/TAGS subtags

ctags:: nukectags
	$(MAKE) $(MFLAGS) TAGCMD=$(CTAGS) TAGOUT=$(CURDIR)/tags subtags

tags:: etags

subtags:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERTAGS)
	$(TAGCMD) -a -o $(TAGOUT) $^
	$(BK_SUBDIRRULE)


#
# Prevent targets from being files
#
.PHONY : default nuke clean neat depend nukedepend build install nukeetags nukectags etags ctags tags subtags preprocess
