# -*- makefile -*-
# 
# $Id: Make.targets,v 1.55 2002/08/02 21:36:12 dupuy Exp $
#
# ++Copyright LIBBK++
#
# Copyright (c) 2001,2002 The Authors.  All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Mail <projectbaka@baka.org> for further information
#
# --Copyright LIBBK--
#
#
# Target rules--things people might want
#

#
# Top-level (meta-package) makefiles get an install target as their default
#
ifeq ($(PKGTOP),.)
ifneq ($(BK_WANT_DEFAULT),false)
default: all
all: install
BK_WANT_DEFAULT=false
endif
endif

#
# Sub-directory rule
#
ifeq ($(strip $(BK_ALL_SUBDIR)),)
BK_SUBDIRRULE= # No sub-directories
else # BK_SUBDIR
BK_SUBDIRRULE=@ \
	for d in $(BK_ALL_SUBDIR); do \
	 if [ -d $$d ]; then \
	  (cd $$d && $(MAKE) $@) || \
	   { ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; } \
	 fi; \
	done; exit $$ERR
endif # BK_SUBDIR

ifneq ($(BK_WANT_DEFAULT),false)
#
# Default rule--standard target to compile everything
#
default:: 
	$(BK_SUBDIRRULE)	

ifneq ($(strip $(BK_WANT_C)),false)
default:: $(BK_LOCALTARGETS) $(BK_GROUPTARGETS) $(BK_PACKAGETARGETS) $(BK_LARGE_LIB) $(BK_LARGE_INTERNALLIB) $(BK_SIMPLE_PROGS) $(BK_LARGE_PROG) $(BK_SIMPLE_INTERNALPROGS) $(BK_LARGE_INTERNALPROG)
endif # BK_WANT_C

ifneq ($(strip $(BK_WANT_JAVA)),false)
default:: $(BK_JAVA_JAR)
ifneq ($(strip $(BK_JAVA_HELP)),)
ifneq ($(strip $(BK_JAVA_HELP_LANG)),)
default:: help
endif # BK_JAVA_HELP_LANG
endif # BK_JAVA_HELP
endif # BK_WANT_JAVA
endif # BK_WANT_DEFAULT



#
# Get rid of stuff including stuff that might be valuable (e.g. autosave files, etc)
#
nuke::
	$(RRM) -- $(BK_NUKESTUFF)
	$(BK_SUBDIRRULE)	


#
# Get rid of stuff that can be regenerated or is just stupid, including .depend files
#
clean::
	$(RRM) -- $(BK_CLEANSTUFF)
	$(BK_SUBDIRRULE)	


#
# Get rid of stuff that can be regenerated or is just stupid, excluding .depend files
#
neat::
	$(RRM) -- $(BK_NEATSTUFF)
	$(BK_SUBDIRRULE)	


#
# Preprocess
#
preprocess:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC)
preprocess:: $(patsubst %.c,%.i,$(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC))


#
# Dependency generation
#
depend:: nukedepend

nukedepend::
	$(RM) .depend

# If a Makefile will not work without a depend file, use a rule for building
# .depend directly.  There can only be one of these, so we cannot use a double
# colon rule.  Fortunately, only Java help file generation requires this now.

ifneq ($(strip $(BK_WANT_JAVA)),false)
ifneq ($(strip $(BK_JAVA_HELP)),)
ifneq ($(strip $(BK_JAVA_HELP_LANG)),)
depend:: dotdepend

.SUFFIXES: .jhm .html .xml

dotdepend .depend: $(foreach HLANG,$(BK_JAVA_HELP_LANG),$(HLANG)/Map.jhm)
	for L in $(BK_JAVA_HELP_LANG); do \
	  echo $(ECHO_N) "$(BK_JAVA_HELP)_$$L.jar: $(ECHO_C)"; \
	  $(BK_INSTALLPROGDIR)/buildhelp -l $(BK_JAVA_HELP) $$L/Map.jhm; \
	  echo ""; \
	done > .depend

nuke clean::
	for L in $(BK_JAVA_HELP_LANG); do \
	  $(RM) `$(BK_INSTALLPROGDIR)/buildhelp -l $(BK_JAVA_HELP) $$L/Map.jhm`; \
	done
endif # BK_WANT_JAVA
endif # BK_JAVA_LANG
endif # BK_JAVA_HELP

ifneq ($(strip $(BK_WANT_C)),false)
ifneq ($(strip $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERDEPS)),)
depend:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERDEPS)
	$(MKDEP) $^ | $(SED) -e 's/\([^:]*\)\.o: /\1.o \1$(OBJEXT): /' >> .depend

# avoid lots of useless chaining (to RCS, SCCS, etc.) on installed header files
ifeq ($(findstring /usr,$(BK_INSTALLINCDIR)),)
/usr/%.h:
	@
endif

endif # We Have Source
endif # BK_WANT_C

depend::
	$(BK_SUBDIRRULE)


#
# Multi-architecture support
#
ifneq ($(strip $(PKGSUBDIR)),)
build::
	-d=BUILD/$(BK_ARCHNAME); (ls ./Make*; find $(BK_ALL_SUBDIR) -name Make\* -print) | while read f; do mkdir -p $$d/`dirname $$f`; ln -s `pwd`/$$f $$d/$$f; done
	@echo "To compile: cd BUILD/$(BK_ARCHNAME) and type make"
endif # PKGSUBDIR


#
# Installation support
#
ifneq ($(BK_NO_USER_SHARED_LIBS),true)

install::
	$(BK_SUBDIRRULE)

install:: actual_install

else

install:: install-first install-normal install-last

install-first:
	@ for d in $(BK_ALL_FIRST_DIRS);							\
	do 											\
		if [ -d $$d ]; 									\
		then 										\
			( cd $$d && $(MAKE) actual_install ) || 				\
			{ ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; }	\
		fi; 										\
	done;											\
	for d in $(BK_SUBDIR) $(BK_ALL_LAST_DIRS);						\
	do 											\
		if [ -d $$d ]; 									\
		then 										\
			( cd $$d && $(MAKE) $@)	||						\
			{ ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; }	\
		fi;										\
	done

install-normal:							
	@ if [ -n "$(BK_SUBDIR)" ];								  \
	then											  \
		for d in $(BK_SUBDIR);								  \
		do										  \
			if [ -d $$d ];								  \
			then									  \
				( cd $$d && $(MAKE) $@ ) ||					  \
				{ ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; } \
												  \
			fi;									  \
		done;										  \
	else											  \
		$(MAKE) actual_install;								  \
	fi

install-last:
	@ for d in $(BK_ALL_LAST_DIRS);								\
	do											\
		if [ -d $$d ];									\
		then										\
			( cd $$d && $(MAKE) actual_install ) ||					\
			{ ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; }	\
		fi;										\
	done;											\
	for d in $(BK_SUBDIR) $(BK_ALL_FIRST_DIRS);						\
	do											\
		if [ -d $$d ];									\
		then										\
			( cd $$d && $(MAKE) $@ ) ||						\
			{ ERR=$$?; case "$(MFLAGS)" in *k*) : ;; *) exit $$ERR ;; esac; }	\
		fi;										\
	done
endif

ifeq ($(strip $(BK_WANT_JAVA)),false)
BK_JAVA_JAR=
BK_JAVA_HELP_JAR=
endif # BK_WANT_JAVA

ifeq ($(strip $(BK_WANT_C)),false)
BK_LARGE_LIB=
BK_LARGE_MODULE=
BK_SIMPLE_PROGS=
BK_LARGE_PROG=
BK_PUBLIC_INC=
BK_MAN=
endif # BK_WANT_C

#
# <TRICKY>Due to vpath %$(LIBEXT) $(BK_LIBDIR) in Make.variables, the
# dependency on $(BK_LARGE_LIB) may actually refer to the installed library (if
# it is up to date w.r.t. the component .o files).</TRICKY>
#
actual_install:: $(BK_LARGE_LIB)
ifneq ($(strip $(BK_INSTALLLIBDIR)),)
ifneq ($(strip $(BK_LARGE_LIB)),)
ifneq ($(filter %.la,$(BK_LARGE_LIB)),)
	@if [ $^ != $(BK_INSTALLRDIR)/$(^F) ]; then \
	  echo $(MKDIR) $(BK_INSTALLRDIR); \
	  $(MKDIR) $(BK_INSTALLRDIR) >/dev/null 2>&1; \
	  echo $(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_LIBFLAGS) $^ $(BK_INSTALLRDIR); \
	  $(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_LIBFLAGS) $^ $(BK_INSTALLRDIR); \
	  $(EDIT_LT_LIBINSTALL); \
	fi
else # non-libtool installation without absolute path
	@if [ $^ != $(BK_INSTALLLIBDIR)/$(^F) ]; then \
	  echo $(MKDIR) $(BK_INSTALLLIBDIR); \
	  $(MKDIR) $(BK_INSTALLLIBDIR); \
	  echo $(INSTALL) $(INSTALL_LIBFLAGS) $^ $(BK_INSTALLLIBDIR); \
	  $(INSTALL) $(INSTALL_LIBFLAGS) $^ $(BK_INSTALLLIBDIR); \
	fi
endif
endif # BK_LARGE_LIB
endif # BK_INSTALLLIBDIR

actual_install:: $(BK_LARGE_MODULE)
ifneq ($(strip $(BK_INSTALLLIBDIR)),)
ifneq ($(strip $(BK_LARGE_MODULE)),)
	-@$(MKDIR) $(BK_INSTALLRDIR) >/dev/null 2>&1
	$(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_LIBFLAGS) $^ $(BK_INSTALLRDIR)
	@$(EDIT_LT_MODINSTALL)

endif # BK_LARGE_MODULE
endif # BK_INSTALLLIBDIR

actual_install:: $(BK_SIMPLE_PROGS) $(BK_SIMPLE_SCRIPTS) $(BK_LARGE_PROG) $(BK_JAVA_JAR) $(BK_JAVA_HELP_JAR) $(BK_PUBLIC_INC) $(BK_DATAFILES) $(BK_MAN)
ifneq ($(strip $(BK_INSTALLPROGDIR)),)
	$(MKDIR) $(BK_INSTALLPROGDIR)
ifneq ($(strip $(BK_SIMPLE_PROGS)),)
	$(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_BINFLAGS) $(BK_SIMPLE_PROGS) $(BK_INSTALLPATH)
endif # BK_SIMPLE_PROGS
ifneq ($(strip $(BK_SIMPLE_SCRIPTS)),)
	$(INSTALL) $(INSTALL_BINFLAGS) $(BK_SIMPLE_SCRIPTS) $(BK_INSTALLPROGDIR)
endif # BK_SIMPLE_SCRIPTS
ifneq ($(strip $(BK_LARGE_PROG)),)
	$(LIBTOOL_INSTALL) $(INSTALL) $(INSTALL_BINFLAGS) $(BK_LARGE_PROG) $(BK_INSTALLPATH)
endif # BK_LARGE_PROG
endif # BK_INSTALLPROGDIR
ifneq ($(strip $(BK_WANT_JAVA)),false)
ifneq ($(strip $(BK_INSTALLJAVADIR)),)
ifneq ($(strip $(BK_JAVA_JAR)),)
	$(MKDIR) $(BK_INSTALLJAVADIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_JAVA_JAR) $(BK_INSTALLJAVADIR)
endif # BK_JAVA_JAR
ifneq ($(strip $(BK_JAVA_HELP)),)
	$(INSTALL) $(INSTALL_OTHERFLAGS) \
	  $(BK_JAVA_HELP)_$(BK_JAVA_HELP_LANG).jar \
	  $(BK_INSTALLJAVADIR)
endif # BK_JAVA_HELP
endif # BK_INSTALLJAVADIR
endif # BK_WANT_JAVA
ifneq ($(strip $(BK_INSTALLINCDIR)),)
ifneq ($(strip $(BK_PUBLIC_INC)),)
	$(MKDIR) $(BK_INSTALLINCDIR)
	$(INSTALL) $(INSTALL_INCFLAGS) $(BK_PUBLIC_INC) $(BK_INSTALLINCDIR)
endif # BK_PUBLIC_INC
endif # BK_INSTALLINCDIR
ifneq ($(strip $(BK_INSTALLDATADIR)),)
ifneq ($(strip $(BK_DATAFILES)),)
	$(MKDIR) $(BK_INSTALLDATADIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_DATAFILES) $(BK_INSTALLDATADIR)
endif # BK_DATAFILES
endif # BK_INSTALLDATADIR
ifneq ($(strip $(BK_INSTALLCONFIGDIR)),)
ifneq ($(strip $(BK_CONFIGFILES)),)
	$(MKDIR) $(BK_INSTALLCONFIGDIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_CONFIGFILES) $(BK_INSTALLCONFIGDIR)
endif # BK_CONFIGFILES
endif # BK_INSTALLCONFIGDIR
ifneq ($(strip $(BK_INSTALLMANDIR)),)
ifneq ($(strip $(_BK_MAN1)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man1
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN1) $(BK_INSTALLMANDIR)/man1
endif # _BK_MAN1
ifneq ($(strip $(_BK_MAN3)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man3
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN3) $(BK_INSTALLMANDIR)/man3
endif # _BK_MAN3
ifneq ($(strip $(_BK_MAN5)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man5
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN5) $(BK_INSTALLMANDIR)/man5
endif # _BK_MAN5
ifneq ($(strip $(_BK_MAN8)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man8
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN8) $(BK_INSTALLMANDIR)/man8
endif # _BK_MAN8
endif # BK_INSTALLMANDIR

#
# Tags support
#
nukeetags::
	> TAGS

nukectags::
	> tags

etags:: nukeetags
	$(MAKE) TAGCMD=$(ETAGS) TAGOUT=$(CURDIR)/TAGS subtags

ctags:: nukectags
	$(MAKE) TAGCMD=$(CTAGS) TAGOUT=$(CURDIR)/tags subtags

tags:: etags

subtags:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERTAGS)
	if [ "$^" ]; then $(TAGCMD) -a -o $(TAGOUT) $^; fi
	$(BK_SUBDIRRULE)

#
# Test support
#
ifneq ($(strip $(BK_WANT_JAVA)),false)
test:: $(BK_JAVA_PKG_SRC) $(BK_JAVA_PKG_CLASS) \
       $(BK_JAVA_PKG_AUX) $(BK_JAVA_PKG_LOCALE) \
       $(BK_JAVA_PKG_TEST) $(BK_JAVA_PKG_TCLASS)
	$(BK_SUBDIRRULE)

ifneq ($(strip $(BK_JAVA_SRC)),)
test:: jtest

JTEST_HOST=winwood
ifeq ($(shell hostname),$(JTEST_HOST))
jtest: $(BK_JAVA_JTEST)
else
jtest:
	@echo Jtest can only be run on $(JTEST_HOST)
endif # JTEST_HOST
endif # BK_JAVA_SRC
endif # BK_WANT_JAVA

#
# Doxygen support
#
BK_SUBDOX=$(BK_ALL_SUBDIR)
BK_DOXDIRS=$(foreach DIR, $(BK_SUBDOX), $(BK_REALTOP)/$(DIR))
BK_REALMANDIR=$(BK_REALTOP)/$(BK_INSTALLMANDIR)
$(BK_INSTALLDOCDIR)/doxygen/Doxyfile:
	@if [ "" = "$(BK_INSTALLDOCDIR)" ]; then \
	  echo "\$$BK_INSTALLDOCDIR not set in Make.preinstall"; exit 1;\
	fi
	-@$(MKDIR) $(BK_INSTALLDOCDIR)/doxygen 2>/dev/null && \
	$(MKDIR) $(BK_INSTALLMANDIR)/man3 2>/dev/null && \
	 { THIS_TOPDIR=`pwd`; cd $(BK_INSTALLDOCDIR)/doxygen; \
	   $(DOXYGEN) -g > /dev/null;	 \
	   $(MV) Doxyfile Doxyfile.orig && \
	   $(SED) -e '/^PROJECT_NAME/s%=.*%= $(BK_PKGNAME)%' \
		  -e '/^OUTPUT_DIR/s%=.*%= $(BK_INSTALLDOCDIR)/doxygen%' \
		  -e '/^MAN_OUT/s%=.*%= $(BK_REALMANDIR)%' \
		  -e '/^INPUT[ \t]/s%=.*%= $(BK_DOXDIRS)%' \
		  -e '/^FILE_PATTERNS/s%=.*%= *.[chyls] *.java%' \
		  -e '/^GENERATE_MAN[ \t]/s%=.*%= YES%' \
		  -e '/^RECURSIVE[ \t]/s%=.*%= YES%' \
		  -e '/^EXCLUDE_PATTERNS/s%=.*%= *Test Test*%' \
		  -e '/^EXTRACT_STATIC/s%=.*%= YES%' \
		  -e '/^JAVADOC_AUTOBRIEF/s%=.*%= YES%' \
		  -e '/^ALPHABETICAL_INDEX/s%=.*%= YES%' \
		  -e '/^HAVE_DOT/s%=.*%= $(HAVE_DOT)%' \
		< Doxyfile.orig > Doxyfile && \
	   $(ECHO) 'Please verify $(BK_INSTALLDOCDIR)/doxygen/Doxyfile'; \
	 }

# Since this target depends not just on its configuration file (Doxyfile)
# but also on the *entire* source distribution which it covers, we just
# rebuild the database each time (i.e. we never make a "doxygen" file so the
# target "doxygen" is always out of date.  If this gets too odious for words
# then we can break the dependency of viewdox on doxygen and leave it up to
# the user to type "make doxygen" from time to time in order to update his
# database.
doxygen: $(BK_INSTALLDOCDIR)/doxygen/Doxyfile
	-@$(ECHO) "Rebuilding doxygen database in $(BK_INSTALLDOCDIR)/doxygen" 
	$(RM) -rf $(BK_INSTALLDOCDIR)/doxygen/[a-z]*
	$(DOXYGEN) $(BK_INSTALLDOCDIR)/doxygen/Doxyfile \
	 > $(BK_INSTALLDOCDIR)/doxygen/.lastbuild 2>&1

viewdox: doxygen
	-@$(ECHO) "Starting $(BROWSER)...."; \
	  URL="$(BK_INSTALLDOCDIR)/doxygen/html/index.html"; \
	  case "$(BROWSER)$$DISPLAY" in \
	    *netscape*:*) \
	       $(BROWSER) -remote "OpenURL(file:$(CURDIR)/$$URL,new-window)" \
	        && exit 0 ;; \
	  esac; \
	  $(BROWSER) file:$(CURDIR)/$$URL


#
# Generate Help Documentation
#
ifneq ($(strip $(BK_WANT_JAVA)),false)
ifneq ($(strip $(BK_JAVA_HELP)),)
ifneq ($(strip $(BK_JAVA_HELP_LANG)),)

help: $(patsubst %, $(BK_JAVA_HELP)_%.jar, $(BK_JAVA_HELP_LANG))

$(BK_JAVA_HELP)_%.jar: %/Map.jhm
	$(BK_INSTALLPROGDIR)/buildhelp $(BK_JAVA_HELP) $<

endif # BK_WANT_JAVA
endif # BK_JAVA_LANG
endif # BK_JAVA_HELP

# targets to avoid complaints about missing make includes
$(BKMKDIR)/Make.$(BK_OSNAME)-pre:
$(BKMKDIR)/Make.$(BK_OSNAME)-post:
$(GROUPTOP)/$(PKGTOP)/.user-variables:

#
# Prevent targets from being files
#
.PHONY : DEFAULT default nuke clean neat depend nukedepend dotdepend \
	build install nukeetags nukectags etags ctags tags subtags preprocess \
	doxygen viewdox test help
