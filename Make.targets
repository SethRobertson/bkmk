# -*- makefile -*-
# 
# $Id: Make.targets,v 1.21 2001/11/30 07:49:10 dupuy Exp $
#
# ++Copyright LIBBK++
#
# Copyright (c) 2001 The Authors.  All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Mail <projectbaka@baka.org> for further information
#
# --Copyright LIBBK--
#
#
# Target rules--things people might want
#

#
# Sub-directory rule
#
ifeq ($(strip $(BK_SUBDIR)),)
BK_SUBDIRRULE= # No sub-directories
else # BK_SUBDIR
BK_SUBDIRRULE=@BK_SUBDIR="${BK_SUBDIR}"; if [ -n "$$BK_SUBDIR" ]; then for d in $$BK_SUBDIR; do (cd $$d && $(MAKE) $(MFLAGS) $@) || exit $$?; done; fi
endif # BK_SUBDIR


#
# Default rule--standard target to compile everything
#
default::
	$(BK_SUBDIRRULE)	

default:: $(BK_LOCALTARGETS) $(BK_GROUPTARGETS) $(BK_PACKAGETARGETS) $(BK_LARGE_LIB) $(BK_LARGE_INTERNALLIB) $(BK_SIMPLE_PROGS) $(BK_LARGE_PROG) $(BK_SIMPLE_INTERNALPROGS) $(BK_LARGE_INTERNALPROG) $(BK_JAVA_JAR)


#
# Get rid of stuff including stuff that might be valuable (e.g. autosave files, etc)
#
nuke::
	$(RRM) -- $(BK_NUKESTUFF)
	$(BK_SUBDIRRULE)	


#
# Get rid of stuff that can be regenerated or is just stupid, including .depend files
#
clean::
	$(RRM) -- $(BK_CLEANSTUFF)
	$(BK_SUBDIRRULE)	


#
# Get rid of stuff that can be regenerated or is just stupid, excluding .depend files
#
neat::
	$(RRM) -- $(BK_NEATSTUFF)
	$(BK_SUBDIRRULE)	


#
# Preprocess
#
preprocess:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC)
preprocess:: $(patsubst %.c,%.i,$(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC))


#
# Dependency generation
#
nukedepend::
	> .depend

ifneq ($(strip $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERDEPS)),)
depend:: nukedepend
depend:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERDEPS)
	$(MKDEP) $^ >> .depend
endif # We Have Source

depend::
	$(BK_SUBDIRRULE)


#
# Multi-architecture support
#
ifneq ($(strip $(PKGSUBDIR)),)
build::
	-d=BUILD/$(BK_ARCHNAME); (ls ./Make*; find $(BK_SUBDIR) -name Make\* -print) | while read f; do mkdir -p $$d/`dirname $$f`; ln -s `pwd`/$$f $$d/$$f; done
	@echo "To compile: cd BUILD/$(BK_ARCHNAME) and type make"
endif # PKGSUBDIR


#
# Installation support
#
install::
	$(BK_SUBDIRRULE)

install:: $(BK_LARGE_LIB) $(BK_SIMPLE_PROGS) $(BK_LARGE_PROG) $(BK_JAVA_JAR) $(BK_PUBLIC_INC) $(BK_DATAFILES) $(BK_MAN)
ifneq ($(strip $(BK_INSTALLPROGDIR)),)
ifneq ($(strip $(BK_SIMPLE_PROGS)),)
	$(MKDIR) $(BK_INSTALLPROGDIR)
	$(INSTALL) $(INSTALL_BINFLAGS) $(BK_SIMPLE_PROGS) $(BK_INSTALLPROGDIR)
endif # BK_SIMPLE_PROGS
ifneq ($(strip $(BK_LARGE_PROG)),)
	$(MKDIR) $(BK_INSTALLPROGDIR)
	$(INSTALL) $(INSTALL_BINFLAGS) $(BK_LARGE_PROG) $(BK_INSTALLPROGDIR)
endif # BK_LARGE_PROG
endif # BK_INSTALLPROGDIR
ifneq ($(strip $(BK_INSTALLLIBDIR)),)
ifneq ($(strip $(BK_LARGE_LIB)),)
	$(MKDIR) $(BK_INSTALLLIBDIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_LARGE_LIB) $(BK_INSTALLLIBDIR)
	$(RANLIB) $(BK_LARGE_LIB)
endif # BK_LARGE_LIB
endif # BK_INSTALLLIBDIR
ifneq ($(strip $(BK_INSTALLJAVADIR)),)
ifneq ($(strip $(BK_JAVA_JAR)),)
	$(MKDIR) $(BK_INSTALLJAVADIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_JAVA_JAR) $(BK_INSTALLJAVADIR)
endif # BK_JAVA_JAR
endif # BK_INSTALLJAVADIR
ifneq ($(strip $(BK_INSTALLINCDIR)),)
ifneq ($(strip $(BK_PUBLIC_INC)),)
	$(MKDIR) $(BK_INSTALLINCDIR)
	$(INSTALL) $(INSTALL_INCFLAGS) $(BK_PUBLIC_INC) $(BK_INSTALLINCDIR)
endif # BK_PUBLIC_INC
endif # BK_INSTALLINCDIR
ifneq ($(strip $(BK_INSTALLDATADIR)),)
ifneq ($(strip $(BK_DATAFILES)),)
	$(MKDIR) $(BK_INSTALLDATADIR)
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(BK_DATAFILES) $(BK_INSTALLDATADIR)
endif # BK_DATAFILES
endif # BK_INSTALLDATADIR
ifneq ($(strip $(BK_INSTALLMANDIR)),)
ifneq ($(strip $(_BK_MAN1)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man1
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN1) $(BK_INSTALLMANDIR)/man1
endif # _BK_MAN1
ifneq ($(strip $(_BK_MAN3)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man3
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN3) $(BK_INSTALLMANDIR)/man3
endif # _BK_MAN3
ifneq ($(strip $(_BK_MAN5)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man5
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN5) $(BK_INSTALLMANDIR)/man5
endif # _BK_MAN5
ifneq ($(strip $(_BK_MAN8)),)
	$(MKDIR) $(BK_INSTALLMANDIR)/man8
	$(INSTALL) $(INSTALL_OTHERFLAGS) $(_BK_MAN8) $(BK_INSTALLMANDIR)/man8
endif # _BK_MAN8
endif # BK_INSTALLMANDIR


#
# Tags support
#
nukeetags::
	> TAGS

nukectags::
	> tags

etags:: nukeetags
	$(MAKE) $(MFLAGS) TAGCMD=$(ETAGS) TAGOUT=$(CURDIR)/TAGS subtags

ctags:: nukectags
	$(MAKE) $(MFLAGS) TAGCMD=$(CTAGS) TAGOUT=$(CURDIR)/tags subtags

tags:: etags

subtags:: $(BK_SIMPLE_CSRC) $(BK_LARGE_CSRC) $(BK_LARGE_LIBCSRC) $(BK_LOCAL_CSRC) $(BK_LOCAL_OTHERTAGS)
	if [ "$^" ]; then $(TAGCMD) -a -o $(TAGOUT) $^; fi
	$(BK_SUBDIRRULE)

#
# Test support
#
test:: $(BK_JAVADIR)/$(BK_JAVA_PKG) \
		$(BK_JAVA_PKG_SRC) $(BK_JAVA_PKG_CLASS) \
		$(BK_JAVA_PKG_AUX) $(BK_JAVA_PKG_LOCALE) \
		$(BK_JAVA_PKG_TEST) $(BK_JAVA_PKG_TCLASS)
	$(BK_SUBDIRRULE)
	# should really run jtest

#
# Doxygen support
#
$(BK_INSTALLDOCDIR)/doxygen/Doxyfile:
	@	if [ "X$(BK_INSTALLDOCDIR)" = "X" ]; \
		then \
			echo "You must first set \$$BK_INSTALLDOCDIR in your make environment (most likely Make.preinstall)"; exit 1;\
		fi
	-@	$(MKDIR) $(BK_INSTALLDOCDIR)/doxygen 2>/dev/null; \
		$(DOXYGEN) -g $(BK_INSTALLDOCDIR)/doxygen/Doxyfile;	 \
		$(MV) $(BK_INSTALLDOCDIR)/doxygen/Doxyfile $(BK_INSTALLDOCDIR)/doxygen/Doxyfile.orig && \
		${SED} -e "s%^PROJECT_NAME[ \t]*=%PROJECT_NAME=${BK_PKGNAME}%" -e "s%^OUTPUT_DIRECTORY[ \t]\*=%OUTPUT_DIRECTORY=${BK_INSTALLDOCDIR}/doxygen%" -e "s%^INPUT[ \t]*=%INPUT=${BK_REALTOP}%" -e 's%^FILE_PATTERNS[ \t]*=%FILE_PATTERNS= \*.[chyls]%' -e 's%^RECURSIVE[ \t]*=[ \t]*NO%RECURSIVE=YES%' -e 's%^EXTRACT_STATIC[ \t]*=[ \t]*NO%EXTRACT_STATIC=YES%'< ${BK_INSTALLDOCDIR}/doxygen/Doxyfile.orig > ${BK_INSTALLDOCDIR}/doxygen/Doxyfile  && \
		$(ECHO) "I have created ${BK_INSTALLDOCDIR}/doxygen/Doxyfile and attempted to give it some sane values. You should verify these" \

# Since this target depends not just on its configuration file (Doxyfile)
# but also on the *entire* source distribution which it covers, we just
# rebuild the database each time (i.e. we never make a "doxygen" file so the
# target "doxygen" is always out of date.  If this gets too odious for words
# then we can break the dependency of viewdox on doxygen and leave it up to
# the user to type "make doxygen" from time to time in order to update his
# database.
doxygen: $(BK_INSTALLDOCDIR)/doxygen/Doxyfile
	-@ $(ECHO) "Rebuilding oxygen database in $(BK_INSTALLDOCDIR)/doxygen" 
	-@ 	$(CD) $(BK_INSTALLDOCDIR)/doxygen && \
		$(RM) -rf [a-z]* && \
		$(DOXYGEN) ./Doxyfile > .lastbuild 2>&1

viewdox: doxygen
	-@ 	$(ECHO) "Starting $(BROWSER)...." && \
	 	$(BROWSER) $(BK_INSTALLDOCDIR)/doxygen/html/index.html

#
# Prevent targets from being files
#
.PHONY : default nuke clean neat depend nukedepend build install \
	nukeetags nukectags etags ctags tags subtags preprocess \
	doxygen viewdox test
