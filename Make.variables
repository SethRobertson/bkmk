# -*- makefile -*-
#
#
#
# ++Copyright BAKA++
#
# Copyright Â© 2001-2011 The Authors. All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Send e-mail to <projectbaka@baka.org> for further information.
#
# - -Copyright BAKA- -
#
#
# Variables
#

# Protected code which runs only once per make tree build
ifneq ($(BKMKVAR_VAR_CORRECT),true)
# Correct make's PWD so that it uses nice paths
NORMALIZEPWD='$$_ = q^$(PWD)^;'$(NORMALIZE)
PWD:=$(shell $(PERL) -e $(NORMALIZEPWD))

# this is the directory where libraries will actually be copied; can now be path to comply with documented interfaces
NORMALIZERDIR='$$_ = q^$(PWD)/$(BK_INSTALLLIBDIR)^;'$(NORMALIZE)
BK_INSTALLRDIR=$(shell $(PERL) -e $(NORMALIZERDIR))

NORMALIZEPATH='$$_ = q^$(PWD)/$(BK_INSTALLPROGDIR)^;'$(NORMALIZE)
BK_INSTALLPATH=$(shell $(PERL) -e $(NORMALIZEPATH))

# What the hell is this all about?  We do NOT want to save it cause dammit if it is overridden in .uservariables it damn well should be.  You cannot debug fullrelease without it
#NORMALIZEDIR:='$$_ = q^$(PWD)/$(BK_SAVE_INSTALLBASE)^;'$(NORMALIZE)
NORMALIZEDIR:='$$_ = q^$(PWD)/$(BK_INSTALLBASE)^;'$(NORMALIZE)
BK_INSTALLDIR=$(shell $(PERL) -e $(NORMALIZEDIR))

# Allow automatic make parallelization discovery
ifndef BKMK_NO_AUTOPARALLELIZATION
MAKEFLAGS+=$(shell $(PERL) -e 'exit 0 unless open(X,"/proc/cpuinfo"); while(<X>) { if (/^processor\s+: (\d+)/) { $$procnum = $$1; } } print " --jobs ".scalar($$procnum+2)."\n";' )
export MAKEFLAGS
endif # BKMK_NO_AUTOPARALLELIZATION

BKMKVAR_VAR_CORRECT=true
export BK_INSTALLRDIR BK_INSTALLPATH BKMKVAR_VAR_CORRECT BK_INSTALLDIR
endif # BKMKVAR_VAR_CORRECT

# If BK_INSTALLRPATH is "installdir" or unset use the default directory
# (this is a safe default for systems supporting DT_RUNPATH ELF tag; other
# systems should set it to /lib in Make.${OSNAME}-pre) (see <WARNING/> below).
ifndef BK_INSTALLRPATH
BK_INSTALLRPATH=$(BK_INSTALLRDIR)
else # BK_INSTALLRPATH
ifeq ($(BK_INSTALLRPATH),installdir)
BK_INSTALLRPATH=$(BK_INSTALLRDIR)
endif # BK_INSTALLRPATH
endif # BK_INSTALLRPATH

ifndef BK_WANT_LIBTOOL
BK_WANT_LIBTOOL=true
endif # !BK_WANT_LIBTOOL

ifeq ($(WANT_LIBTOOL),false)
BK_WANT_LIBTOOL=false
endif # !BK_WANT_LIBTOOL

ifeq ($(WANT_STATIC),true)
BK_WANT_STATIC=true
endif # !BK_WANT_LIBTOOL

# SSL Stuff
BK_USING_SSL=true

ifeq ($(strip $(WANT_SSL)),false)
BK_USING_SSL=false
endif # WANT_SSL == false

ifneq ($(strip $(HAVE_LIBSSL)),true)
BK_USING_SSL=false
endif # HAVE_LIBSSL != true

ifdef SSL_INC_PATH
BK_SSL_INCLUDE=$(SSL_INC_PATH)
else
BK_SSL_INCLUDE=/usr/local/ssl/include
endif # SSL_INC_PATH

ifdef SSL_LIB_PATH
BK_SSL_LIBDIR=$(SSL_LIB_PATH)
BK_SSL_RPATH=$(SSL_LIB_PATH)
else
ifneq ($(shell $(LS) $(BK_INSTALLBASE)/lib/libssl.so 2>/dev/null),)
BK_SSL_LIBDIR=$(BK_INSTALLRDIR)
BK_SSL_RPATH=$(BK_INSTALLRPATH)
else
BK_SSL_LIBDIR=/usr/local/ssl/lib
BK_SSL_RPATH=/usr/local/ssl/lib
endif
endif # SSL_LIB_PATH


#
# Junk
#
BK_NEATSTUFF=$(BK_LOCALJUNK) $(BK_GROUPJUNK) $(BK_PKGJUNK) $(BK_BKJUNK) $(BK_STDJUNK)
BK_CLEANSTUFF=$(BK_NEATSTUFF) $(BK_LOCALCLEANJUNK) $(BK_GROUPCLEANJUNK) $(BK_PKGCLEANJUNK) $(BK_BKCLEANJUNK)
BK_NUKESTUFF=$(BK_CLEANSTUFF) $(BK_NUKEJUNK) $(BK_LOCALNUKEJUNK) $(BK_GROUPNUKEJUNK) $(BK_PKGNUKEJUNK) $(BK_BKNUKEJUNK)
BK_BKJUNK=$(BK_SIMPLE_PROGS) $(BK_LARGE_PROG) $(BK_LARGE_LIB) $(BK_SIMPLE_INTERNALPROGS) $(BK_LARGE_INTERNALPROG) $(BK_ZIPPED_FILES) $(BK_LARGE_INTERNALLIB) $(BK_JAVA_JAR)
BK_STDJUNK=*.o *.obj *.lo *.a *.la core tca.log tca.map .libs .inslog* _1001.out a.out mon.out *.core *.class *.err *.htm pchdir
BK_BKCLEANJUNK=.depend tags *.rpt
BK_BKNUKEJUNK=.\\\#* \\\#* *.rej *.orig TAGS *~

BK_EXCLUDE=CVS ChangeLog Makefile Make.include Make.preinclude .git .gitignore $(BK_NUKESTUFF)

BK_ALL_FIRST_DIRS=$(BK_INCLUDE_DIRS) $(BK_FIRST_DIRS)
BK_ALL_LAST_DIRS=$(BK_EXECUTABLE_DIRS) $(BK_LAST_DIRS)
BK_ALL_SUBDIR=$(BK_ALL_FIRST_DIRS) $(BK_SUBDIR) $(BK_ALL_LAST_DIRS)

ifeq ($(BK_WANT_STATIC), true)
# Libtool claims to support both a -static and an --all-static link mode
# argument, but it did not work (for us) with libtool-1.4.2.  This may have
# changed with libtool-1.5, or there may be (have been) something about the way
# we invoked it (especially with those hacky perl scripts mangling things).
BK_WANT_LIBTOOL=false
endif # BK_WANT_STATIC

ifeq ($(BK_WANT_LIBTOOL), false)
BK_NO_USER_SHARED_LIBS=true
endif # BK_WANT_LIBTOOL

#
# C source filenames for standard production rules
#
BK_SIMPLE_CSRC:=$(addsuffix .c,$(BK_SIMPLE_PROGS) $(BK_SIMPLE_INTERNALPROGS))
BK_LARGE_CSRC:=$(patsubst %.y,%.tab.c,$(BK_LARGE_SRC))
BK_LARGE_CSRC:=$(patsubst %.l,%.c,$(BK_LARGE_CSRC))
BK_LARGE_LIBCSRC:=$(patsubst %.y,%.tab.c,$(BK_LARGE_LIBSRC))
BK_LARGE_LIBCSRC:=$(patsubst %.l,%.c,$(BK_LARGE_LIBCSRC))
_BK_MAN1=$(filter %.1,$(BK_MAN))
_BK_MAN3=$(filter %.3,$(BK_MAN))
_BK_MAN5=$(filter %.5,$(BK_MAN))
_BK_MAN8=$(filter %.8,$(BK_MAN))


#
# Standard commands
#
RRM=$(RM_CONFIG) -rf
RM=$(RM_CONFIG) -f
MKDEP=$(CPP) -M $(CPPFLAGS)
MKDIR=$(MKDIR_CONFIG) -p

# Use -p to preserve timestamps wherever possible. This is mostly so that
# header file installs don't trigger dependencies.

# Install (GNU or BSD)
INSTALL_BINFLAGS=-p -m 775
# install header files read-only to avoid editing them (and not originals)
ifeq ($(findstring CYGWIN,$(BK_OSNAME)),)
INSTALL_INCFLAGS=-p -m 444
else # on CygWin, install -p on read-only files fails
INSTALL_INCFLAGS=-m 444
endif
INSTALL_LIBFLAGS=$(INSTALL_OTHERFLAGS)
INSTALL_OTHERFLAGS=$(INSTALL_PRESERVE) -m 664


# Yacc
YFLAGS=
YACCLIBS=-ly

# Lex
LOPTDEBUG= #-CF
LFLAGS=$(LOPTDEBUG)
LEXLIBS=-lfl

# Libtool
LT_CFLAGS=
LT_LDFLAGS+=-avoid-version -no-undefined
LT_M_LDFLAGS+=-module -avoid-version -no-undefined

ifeq ($(BK_WANT_LIBTOOL), true)
LIBTOOL_COMPILE=$(LIBTOOL) --mode=compile
LIBTOOL_LINK=$(LIBTOOL) --mode=link --quiet
LIBTOOL_INSTALL=$(LIBTOOL) --mode=install --quiet
else # BK_WANT_LIBTOOL
LIBTOOL_COMPILE=
LIBTOOL_LINK=
LIBTOOL_INSTALL=
BK_INSTALLRPATH=$(BK_INSTALLRDIR)
endif # BK_WANT_LIBTOOL

#
# <WARNING>If $(BK_INSTALLRDIR) != $(BK_INSTALLRPATH) (i.e. a "production"
# build), path hardcoding gets tricky.  The supported libtool way of handling
# this is for the install directory to include the RPATH directory as a final
# component, (e.g. if RPATH is /usr/local/lib, the install directory could be
# /home/demo/src/tmp/usr/local/lib, but not /home/demo/src/INSTALL/lib).
#
# Previously, in order to prevent the embedded RPATH from overriding the
# LD_LIBRARY_PATH environment variable, we used a spurious RPATH, namely /Use/
# LD_LIBRARY_PATH/Instead/Of/Hardcoded/Paths/Silly/Linux/Libtool/Grr/Grr/Grr.
# Not surprisingly, this was never a final component of the install directory.
# Now that we discovered the magic incantation (see comments at end of ticket
# #375) to force use of DT_RUNPATH, which is searched *after* LD_LIBRARY_PATH,
# rather than DT_RPATH, which comes before, we no longer need to use such an
# absurd path, and can use /lib instead, which is the usual final component,
# and conveniently does not exist on *BSD, where DT_RUNPATH is not recognized
# by the runtime linker.  (On Mac OS X, the environment variable always takes
# precedence over the embedded paths, so it doesn't matter if /lib exists.)
#
# When we used the spurious RPATH, we had to take matters into our own hands,
# and there were a set of hairy perl scripts that ran at module/library install
# time and program link time to keep this all straight (mostly; there was at
# least one problem with them - see ticket #998).  Life is simpler now, and
# we merely need to enforce the libtool-supported restriction.</WARNING>
#

ifneq ($(BK_INSTALLRDIR),$(BK_INSTALLRPATH))
LIBTOOL_INSTALL_TEST=\
 case $(BK_INSTALLRDIR) in *$(BK_INSTALLRPATH)) echo OK;; esac
ifneq ($(shell $(LIBTOOL_INSTALL_TEST)),OK)
$(error BK_INSTALLRDIR ($(BK_INSTALLRDIR)) must end with $(BK_INSTALLRPATH))
endif
endif

######################################################################
# Java stuff
JAVACFLAGS=$(USER_JAVAC_FLAGS) -g
JARFLAGS=-cfm
# JARFLAGS=-cifm causes java.io.IOException: invalid header field
# (so we run the indexing separately, after the file is created)

BK_JAVA_CPATH=$(subst :,$(PATH_SEPARATOR),$(BK_JAVADIR):$(BK_JAVA_CP))
BK_JAVA_TESTCP=$(BK_JAVA_CPATH)$(PATH_SEPARATOR)/usr/local/java/lib/junit.jar

BK_JAVA_PKGDOT=$(subst /,.,$(BK_JAVA_PKG))

# file list variables for Java production rules

BK_JAVA_CLASS:=$(patsubst %.java,$(BK_JAVA_PKG)/%.class,$(BK_JAVA_SRC))
BK_JAVA_TCLASS:=$(patsubst %.java,$(BK_JAVA_PKG)/%.class,$(BK_JAVA_TEST))

# These are recursively expanded variables using =, rather than directly
# expanded variables using :=, so that the $(wildcard ...) matching will
# occur after the java compiler has had a chance to create the inner class
# class files.  Unfortunately, somehow $(wildcard) doesn't see the new files.
#BK_JAVA_ICLASS_TMP=\
#	$(foreach tmp, $(patsubst %.class,%,$(BK_JAVA_CLASS)), \
#		$(wildcard $(BK_JAVADIR)/$(tmp)$$*.class))
BK_JAVA_ICLASS_TMP=$(filter-out %$$*.class, \
  $(shell echo $(patsubst %.class,$(BK_JAVADIR)/%\$$*.class,$(BK_JAVA_CLASS))))
BK_JAVA_ICLASS=\
	$(subst $$,\$$,$(patsubst $(BK_JAVADIR)/%,%,$(BK_JAVA_ICLASS_TMP)))

BK_JAVA_PROPS:=$(wildcard $(GROUPTOP)/$(LOCALE)/*.properties)
BK_JAVA_LOCALE:=$(patsubst $(GROUPTOP)/$(LOCALE)/%,%,$(BK_JAVA_PROPS))

BK_JAVA_PNGS:=$(foreach I,$(IMAGES),$(wildcard $(GROUPTOP)/$(I)/*.png))
BK_JAVA_JPGS:=$(foreach I,$(IMAGES),$(wildcard $(GROUPTOP)/$(I)/*.jpg))
# Don't use GIFs - they are patented by Unisys
#BK_JAVA_GIFS:=$(foreach I,$(IMAGES),$(wildcard $(GROUPTOP)/$(I)/*.gif))
BK_JAVA_IMAGES:=$(patsubst $(GROUPTOP)/%,%,$(BK_JAVA_PNGS) $(BK_JAVA_JPGS))

BK_JAVA_PKG_CLASS:=$(addprefix $(BK_JAVADIR)/,$(BK_JAVA_CLASS))
BK_JAVA_PKG_TCLASS:=$(addprefix $(BK_JAVADIR)/,$(BK_JAVA_TCLASS))
BK_JAVA_PKG_SRC:=$(addprefix $(BK_JAVADIR)/$(BK_JAVA_PKG)/,$(BK_JAVA_SRC))
BK_JAVA_PKG_TEST:=$(addprefix $(BK_JAVADIR)/$(BK_JAVA_PKG)/,$(BK_JAVA_TEST))
# AUX is deprecated - use images instead
BK_JAVA_PKG_AUX:=$(addprefix $(BK_JAVADIR)/$(BK_JAVA_PKG)/,$(BK_JAVA_AUX))
BK_JAVA_PKG_LOCALE:=$(addprefix $(BK_JAVADIR)/,$(BK_JAVA_LOCALE))
BK_JAVA_PKG_IMAGES:=$(addprefix $(BK_JAVADIR)/,$(BK_JAVA_IMAGES))

BK_JAVA_MF:=$(patsubst %.jar,%.MF,$(BK_JAVA_JAR))
BK_JAVA_HELP_JAR:=$(patsubst %, $(BK_JAVA_HELP)_%.jar, $(BK_JAVA_HELP_LANG))
BK_JAVA_HELP_PDF:=$(patsubst %, $(BK_JAVA_HELP)_%.pdf, $(BK_JAVA_HELP_LANG))

ifndef JAVADOC_PATH
BK_JAVADOC_PATH=$(GROUPTOP)/$(PKGTOP)/doc/java/
else
BK_JAVADOC_PATH=$(JAVADOC_PATH)
endif # !JAVADOC_PATH


######################################################################
# Jtest stuff
# This was probably hardcoded so that folks could configure on any machine
# but still run jtest on wwinwood; however, that no longer works as
# winwood's /usr/local/parasoft is now the same as everyone elses. so we
# will autoconf JTEST and it will start to work when we get jest up and
# running again.
#JTEST=/usr/local/parasoft/bin/jtest

JTESTERR={ $(SED) -n -e 's/^\[\([^,]*\), line \([0-9]*\)\]/\1:\2:/' \
		     -e '/^ERRORS/,/^Class Metrics:/p' $*.err && false; }

ifeq ($(DISPLAY),)
JTESTOUT=-nogui
endif # !DISPLAY
ifeq ($(JTESTUI),)
JTESTOUT=-nogui
endif # !JTESTUI

ifeq ($(JTESTOUT),)
JTESTERR=true
# don't be nuking generated .ctp files when user may have tweaked them
.PRECIOUS: %.ctp
endif # !JTESTOUT

BK_JAVA_JTEST:=$(patsubst %.java,%.rpt,$(BK_JAVA_SRC))
# what about inner classes?
#BK_JAVA_JTEST+=$(patsubst $(BK_JAVA_PKG)/%.class,%.rpt,$(BK_JAVA_ICLASS))


######################################################################
# C stuff

# Traditional resolver
#RESOLVER_DEFINES=-DRESOLVER=RESOLV
RESOLVER_DEFINES=
RESOLVER_INCLUDES=
RESOLVER_LDS=
#make it work on Windows for now
#LIBRESOLVER=-lresolv $(LIB44BSD)
LIBRESOLVER=
LIB44BSD=#-l44bsd

# Libraries
DBM_LIBS=-ldb
TERMINAL_LIBS=-ltermcap

ifneq ($(strip $(WANT_LIBZ)),false)
# Are we actually even using this?
COMPRESS_LIBS=-lz
endif

# BK issues
ifneq ($(NO_STDBKCCSTUFF),true)
BK_DEFINES+= $(RESOLVER_DEFINES)
BK_INCS= $(RESOLVER_INCLUDES)
BK_LDS= $(RESOLVER_LDS)

BK_LIBS=

ifneq ($(strip $(BK_USING_SSL)),false)
LIBBKSSL=-lbkssl -lssl
else
BK_DEFINES+= -DNO_SSL
endif

ifneq ($(strip $(WANT_BK_XML)),false)
BK_LIBS+= -lbkxml
endif

# <TODO bugid="8057">it's possible that not all of  -ldict -lfsma -lpqueue need
# to be present for shared library linking, as they can be dependencies of libbk
# but macros that result in direct calls may complicate or prevent this.</TODO>
BK_LIBS+= -lbk $(LIBBKSSL) -ldict -lfsma -lpqueue -lpopt $(LIBRESOLVER)  $(COMPRESS_LIBS)

# <TODO bugid="8057">strip -lutil/-lcrypt/-lcrypto from the global LT_LDLIBS
# and add it to the specific libraries (e.g. libbk) that need them.</TODO>
LT_LDLIBS+= $(AC_LIBS)

endif # NO_STDBKCCSTUFF

ifeq ($(BK_USING_BOUNDS_CHECKING),true)
ifeq ($(shell basename $(CC_CONFIG)),gcc)
CC_CONFIG=$(BGCC)
BK_SPECIAL_DEBUG=
CCOPTS+=-fbounds-checking
COMPILER_NAME=gcc
BK_DEFINES+=-DBGCC_BOUNDS_CHECKING
endif # CC_CONFIG==gcc
# NB: At SYSD, this does not yet work
ifeq ($(CXX_CONFIG),g++)
CXXOPTS+=-fbounds-checking
COMPILER_NAME=gcc
endif # CXX_CONFIG=g++
endif # BK_USING_BOUNDS_CHECKING

ifeq ($(shell basename $(CC_CONFIG)),gcc)
COMPILER_NAME=gcc
endif # CC_CONFIG=gcc

# Placed in bkmk configure due to non-bkmk requirements
#ifeq ($(BK_BUILD_32BIT_ON_64),true)
#CCOPTS += -m32
#CXXOPTS += -m32
#endif # BK_BUILD_32BIT_ON_64

# C
CC_normal=$(strip $(CC_CONFIG) $(CCOPTS))
CC_strict=$(strip $(CXX_CONFIG) $(CXXOPTS))
#CC=$(CC_strict)
CC=$(CC_normal)
CXX=$(CXX_CONFIG) $(CXXOPTS)

ifneq ($(BK_USING_INSURE),true)
# gcc options common to both gcc and bgcc
ifeq ($(COMPILER_NAME),gcc)

GCC_VERSION:=$(shell $(CC_CONFIG) --version | $(AWK) ' NR==1 { print $$3 }')

# Don't eliminate inline warnings; make them work, remove them, or tweak the
# inliner settings (see compiler_inliner limit)
#
# <TODO>Although it may appear that expr handles 3.4.3 >= 3.4.2 "properly" it
# is just doing a string comparison, and gets 3.10.5 >= 3.4.2 wrong.  This
# should use something that does semi-numeric version comparison.</TODO>
#
ifeq ($(shell $(EXPR) '$(GCC_VERSION)' '>=' '3.4.2'),1)
LARGE_FUNCTION_INSNS=--param large-function-insns=10000
endif

ifeq ($(shell $(EXPR) '$(GCC_VERSION)' '>=' '4.4.2'),1)
BK_GCC_INLINE_CHECK_IS_STUPID=very
endif

ifneq ($(BK_GCC_INLINE_CHECK_IS_STUPID),very)
GCC_INLINE_CHECK=-Winline $(LARGE_FUNCTION_INSNS)
endif

ifdef PTHREAD_WITH_BAD_EMPTY_LOOPS
COMPILER_DEBUG += -Wno-empty-body
endif

ifneq ($(BK_NO_WARNINGS),true)
COMPILER_DEBUG+=-Wmissing-prototypes -Wcomment -Wformat -Wimplicit -Wmain -Wmultichar -Wswitch -Wshadow -Wtrigraphs $(GCC_INLINE_CHECK) $(COMPILER_DEBUG_ERROR)

ifneq ($(HAVE_OVERZEALOUS_CHAR_SUBSCRIPT),true)
COMPILER_DEBUG+=-Wchar-subscripts
endif

ifneq ($(BK_NO_STRICT_PROTOTYPES),true)
ifneq ($(WANT_NO_STRICT_PROTOTYPES),true)
COMPILER_DEBUG+=-Wstrict-prototypes
endif
endif

ifneq ($(NO_POINTER_SIGN_WARN),)
COMPILER_DEBUG+=-Wno-pointer-sign
endif # NO_POINTER_SIGN_WARN
endif #!BK_NO_WARNINGS

# raise the default instruction limit for the inliner so that some of
# our bigger functions will be inlined. changing this value may affect
# code bloat, but hey, they _are_ inlined functions...
# NB: this only works with gcc 3.3+, but is ignored otherwise. these
# problems exisited in prior versions but warnings weren't issued
ifeq ($(COMPILER_INLINE_LIMIT),)
COMPILER_INLINE_LIMIT=1200
endif # NO COMPILER_INLINE_LIMIT

# options for gcc only
ifneq ($(BK_NO_WARNINGS),true)
ifeq ($(CC_CONFIG),gcc)
COMPILER_DEBUG+=-Wreturn-type -Wpointer-arith
ifneq ($(COMPILER_INLINE_LIMIT),nosupport)
COMPILER_DEBUG+=-finline-limit=$(COMPILER_INLINE_LIMIT)
endif # COMPILER_INLINE_LIMIT
endif # CC_CONFIG=gcc

COMPILER_DEBUG+=$(BK_SPECIAL_DEBUG)
endif #!BK_NO_WARNINGS

ifneq ($(NO_WERROR),true)
COMPILER_DEBUG_ERROR=-Werror
endif # NO_WERROR

ifneq ($(findstring -falign,$(ALIGN_FUNCTIONS_SWITCH)),)
GCCHWOPT=$(ALIGN_FUNCTIONS_SWITCH)
else
ifneq ($(findstring -,$(ALIGN_FUNCTIONS_SWITCH)),)
GCCHWOPT=$(ALIGN_FUNCTIONS_SWITCH)=$(ALIGN_FUNCTIONS)
endif
endif

# default for most platforms
ALIGN_FUNCTIONS=4

ifneq ($(findstring -i386,$(BK_ARCHNAME)),)
GCCHWOPT+= -march=i686
endif
ifneq ($(findstring -i686,$(BK_ARCHNAME)),)
GCCHWOPT+= -march=i686
endif
ifneq ($(findstring -x86_64,$(BK_ARCHNAME)),)
# settings for 32-bit compatibility
#GCCHWOPT+= -m32 -march=i686
# settings for EMT64
#GCCHWOPT+= -march=nocona
# settings for AMD64
GCCHWOPT+= -march=opteron
endif
ifneq ($(findstring -sun4,$(BK_ARCHNAME)),)
# reasonable settings for 32-bit mode
GCCHWOPT+= -m32 -mtune=supersparc
endif
ifneq ($(findstring -sun4u,$(BK_ARCHNAME)),)
# reasonable settings for 64-bit mode
ALIGN_FUNCTIONS=32
GCCHWOPT+= -m64 -mtune=ultrasparc
endif

ifneq ($(BK_NO_OPT),true)
ifeq ($(BK_VALGRIND_OPT),true)
COPTDEBUG+=-O
else # !BK_VALGRIND_OPT
ifeq ($(BK_DEBUG_OPT),true)
COPTDEBUG+=-O2
else # !BK_DEBUG_OPT
COPTDEBUG+=-O3 -funroll-loops
endif # !BK_DEBUG_OPT
endif # !BK_VALGRIND_OPT
# gcc doesn't support -Wuninitialized without -O. And if using insure++ you
# get it anyway.
ifneq ($(BK_NO_WARNINGS),true)
COMPILER_DEBUG+=-Wuninitialized
endif #!BK_NO_WARNINGS
COPTDEBUG+=$(GCCHWOPT)
endif # BK_NO_OPT

ifneq ($(BK_NO_PIPE),true)
COPTDEBUG+=-pipe
endif # BK_NO_PIPE

ifneq ($(BK_NO_DEBUG),true)
COPTDEBUG+=-g $(COMPILER_DEBUG)
else # NO_DEBUG
COPTDEBUG+=-fomit-frame-pointer
endif # BK_NO_DEBUG

endif # COMPILER_NAME=gcc

else # BK_USING_INSURE==true
COPTDEBUG=-g
# Yes for some reason, according to the Insure folks, this should be repeated
ifeq ($(BK_USING_INSURE_DEBUG), true)
INSURE_DEBUG_LIBS=-Zvm -Zvm -Zvm
endif
INSURE_LDS=-L$(PARASOFT)/lib
#INSURE_LIBS=-linsure
INSURE_LIBS=-Zsl
LT_LDLIBS+=$(INSURE_LIBS)
endif # BK_USING_INSURE==true

################################################################
# standard compilation/linking variables

CFLAGS=$(COPTDEBUG)
CPPFLAGS=$(BK_ALLINCS) $(BK_ALLDEFINES)
LDFLAGS+=$(BK_ALLLDS)
LDLIBS=$(BK_ALLLIBS)

# WARNING: INSURE++ really loathes static linking now. (use at your own risk)
ifeq ($(BK_WANT_STATIC),true)
LDFLAGS+=$(LINK_STATIC_FLAG)
LDLIBS+=$(BK_STATIC_LIBS)
endif # BK_WANT_STATIC

OBJEXT=.$(OBJEXT_CONFIG)
ifeq ($(strip $(EXEEXT_CONFIG)),)
EXEEXT=
else # !EXEEXT_CONFIG
EXEEXT=.$(EXEEXT_CONFIG)
endif # !EXEEXT_CONFIG

######################################################################
# What are you using, and what do you want?

ifeq ($(BK_WANT_LIBTOOL),false)
LT=
LTCC=
LTLD=
LIBTOOL=: no-libtool [BK_WANT_LIBTOOL=false]
LIBEXT=.a
LT_CFLAGS=
LT_LDFLAGS=
else # !BK_WANT_LIBTOOL
LT=$(LIBTOOL)
LTCC=$(LIBTOOL_COMPILE)
LTLD=$(LIBTOOL_LINK)
LIBEXT=.la
OBJEXT=.lo
top_builddir=$(BKMKDIR)
endif # !BK_WANT_LIBTOOL

# Even if we want oracle, a *platform* without pthreads can't do oracle
ifeq ($(BK_USING_ORACLE), true)
BK_DEFINES += -DUSING_ORACLE
endif

ifeq ($(BK_WANT_POSTGRES), false)
BK_DEFINES += -DNO_POSTGRES
endif

ifeq ($(BK_USING_GPROF),true)
PROFILING=true
CFLAGS += -pg
# We will add -lc_p to the lib line later to make sure it goes last
endif # BK_USING_GPROF

ifeq ($(BK_USING_PROF),true)
PROFILING=true
CFLAGS += -p
# We will add -lc_p to the lib line later to make sure it goes last
endif # BK_USING_PROF

#
# Uses PTHREAD_LIBS, PTHREAD_CFLAGS, PTHREAD_CC defined by ACX_PTHREAD autoconf
#
ifeq ($(BK_USING_PTHREADS),true)
BK_DEFINES+=-DBK_USING_PTHREADS
CFLAGS += $(PTHREAD_CFLAGS)
ifeq ($(BK_USING_BOUNDS_CHECKING),true)
CC_CONFIG= $(BGCC)
else
CC_CONFIG= $(PTHREAD_CC)
endif

#ifeq ($(BK_USING_GPROF),true)
#ifeq ($(PTHREAD_LIBS),-lpthread)
#PTHREAD_LIBS=-lpthread_p
#endif
#endif

LT_LDFLAGS += $(PTHREAD_CFLAGS)
LT_M_LDFLAGS += $(PTHREAD_CFLAGS)

LT_LDLIBS += $(PTHREAD_LIBS)
else
PTHREAD_LIBS=
endif


ifeq ($(BK_USING_DMALLOC),true)
ifeq ($(BK_USING_PTHREADS),true)
BK_LIBS+= -ldmallocth
else
BK_LIBS+= -ldmalloc
endif
BK_DEFINES+=-DUSING_DMALLOC -DDMALLOC_FUNC_CHECK
endif # BK_USING_DMALLOC

ifeq ($(BK_USING_INSURE),true)
# It's not called Insight any more; use auto-defined __INSURE__
# (Except that it is *not* defined, James has no idea why.)
# (and now it seems like it is again)
#BK_DEFINES+=-D__INSURE__
ifeq ($(BK_NO_MALLOC_WRAP),true)
BK_DEFINES+=-DBK_NO_MALLOC_WRAP
endif
CC=$(INSURE)
endif # BK_USING_INSURE

# We now have a circular dependency which Insure can't deal with. So add
# another libbk (at the end) instance to resolve it.
ifneq ($(strip $(BK_USING_INSURE)),false)
LDLIBS+=-lbk
endif


ifeq ($(BK_NO_USER_SHARED_LIBS),true)
BK_DEFINES+=-DBK_NO_USER_SHARED_LIBS
endif

OS_SEARCHPATH=/usr/local/lib /usr/lib /usr/local/gnu/lib

ifeq ($(shell uname -m),x86_64)
OS_SEARCHPATH:=/usr/lib64 /usr/local/lib64 ${OS_SEARCHPATH}
endif


# <KLUDGE>If you use absolute paths for BK_INSTALLLIBDIR (BK_INSTALLBASE) you
# will get errors like the following as a result of the vpath declarations:
#
# # make[4]: Entering directory `/n/pearl/proj/pearl/dupuy/awb/libbk/lib'
# ../../bkmk/Make.production:186: Commands were specified for file `libbk.la' at ../../bkmk/Make.targets:270,
# ../../bkmk/Make.production:186: but `libbk.la' is now considered the same file as `/home/demo/awb/$ANTURA_HOME/lib/libbk.la'.
# ../../bkmk/Make.production:186: Commands for `/home/demo/awb/$ANTURA_HOME/lib/libbk.la' will be ignored in favor of those for `libbk.la'.
# make[4]: Circular /home/demo/awb/$ANTURA_HOME/lib/libbk.la <- /home/demo/awb/$ANTURA_HOME/lib/libbk.la dependency dropped.
#
# These prevent proper installation of libraries, so in the following vpath
# statements, we can't use BK_INSTALLLIBDIR; instead, we compute a relative
# path to BK_INSTALLLIBDIR from PWD.</KLUDGE>

RELATIVIZE='								   \
	@here = split("/", $$ARGV[0]);					   \
	@there = split("/", $$ARGV[1]);					   \
	if ($$ARGV[1] =~ m@^/@)						   \
	{								   \
		while ($$\#there >= 0)					   \
		{							   \
			last if ($$\#here < 0 || $$here[0] ne $$there[0]); \
			shift(@here);					   \
			shift(@there);					   \
		}							   \
		$$i = 0;						   \
		while ($$i++ <= $$\#here)				   \
		{							   \
			unshift(@there, "..");				   \
		}							   \
	}								   \
	print join("/", @there) . "\n";'

BK_INSTALLRELDIR=$(shell $(PERL) -e $(RELATIVIZE) $(PWD) $(BK_INSTALLDIR))
BK_INSTALLRELLIBS=$(BK_INSTALLRELDIR)/lib

ifneq ($(strip $(BK_INSTALLRELDIR)),)
INSTALL_LDS=-L$(BK_INSTALLRELDIR)/lib
INSTALL_INCS=-I$(BK_INSTALLRELDIR)/include
else
ifneq ($(strip $(BK_INSTALLDIR)),)
INSTALL_LDS=-L$(BK_INSTALLDIR)/lib
INSTALL_INCS=-I$(BK_INSTALLDIR)/include
endif
endif



BK_ALLDEFINES=$(USER_DEFINES) $(LOCAL_DEFINES) $(GROUP_DEFINES) $(PKG_DEFINES) $(BK_DEFINES) $(OS_DEFINES)
BK_ALLINCS=$(LOCAL_INCS) $(GROUP_INCS) $(PKG_INCS) $(BK_INCS) $(INSTALL_INCS) $(OS_INCS)

BK_ALLLDS=$(LOCAL_LDS) $(GROUP_LDS) $(PKG_LDS) $(BK_LDS) $(INSTALL_LDS) $(OS_LDS) $(INSURE_LDS)
# The insure debug libs are allegedly supposed to go last.
BK_TMP_ALLLIBS=$(LOCAL_LIBS) $(GROUP_LIBS) $(PKG_LIBS) $(BK_LIBS) $(PTHREAD_LIBS) $(RT_LIBS) $(OS_LIBS) $(AC_LIBS) $(INSURE_DEBUG_LIBS) $(INSURE_LIBS)
REMOVE_DUP_LIBS='foreach $$lib (reverse(@ARGV)){ if (!exists($$r{$$lib})){ unshift @libs, $$lib; $$r{$$lib}=1;}} print "" . join(" ", @libs) . "\n";'

ifeq ($(PROFILING),true)
NO_DUPS = $(shell $(PERL) -e  $(REMOVE_DUP_LIBS) -- $(BK_TMP_ALLLIBS))
BK_ALLLIBS=$(shell $(PERL) -e 'foreach $$profiled_lib (split(/\s+/, $$ARGV[0])){ $$ARGV[1] =~ s/$$profiled_lib\b/$${profiled_lib}_p/;} print "$$ARGV[1]\n";' -- "$(PROFILED_LIBS)" "$(NO_DUPS)") -lc_p
else
BK_ALLLIBS = $(shell $(PERL) -e  $(REMOVE_DUP_LIBS) -- $(BK_TMP_ALLLIBS))
endif

BK_LIBDIR=$(OS_SEARCHPATH) $(patsubst -L%,%,$(filter -L%,$(BK_ALLLDS)))
BK_RELINKLIBS=$(LOCAL_RELINK_LIBS) $(GROUP_RELINK_LIBS) $(PKG_RELINK_LIBS) $(BK_RELINK_LIBS) $(OS_RELINK_LIBS)


######################################################################
# Tags
CTAGS=ctags
ETAGS=etags


######################################################################
# These are built in to the shell, so you don't need to use them, but
# they are defined for the use of the excessively paranoid.
CD=cd
ECHO=echo

######################################################################
# BUILD directory independence
vpath %.h $(BK_TRUECWD)
vpath %.c $(BK_TRUECWD)
vpath %.l $(BK_TRUECWD)
vpath %.y $(BK_TRUECWD)
vpath %.3 $(BK_TRUECWD)
vpath %.5 $(BK_TRUECWD)
vpath %.1 $(BK_TRUECWD)
vpath %.8 $(BK_TRUECWD)

######################################################################
# This works almost perfectly, except that this is evaluated
# *IMMEDIATELY* and thus requires all of these variables to be already
# defined (e.g. preinclude or earlier).  Unfortunately they are
# typically/always defined later.  Grr.  Otherwise we could nuke the
# previous vpath defintions.
#
BK_VPATH_A:=$(shell $(PERL) -e '@F = split(/\s+/,"$(LDFLAGS)"); foreach $$n (@F) { next unless ($$n =~ s/-L//); print "$$n "; print "$$n/.libs "; }') $(GROUPTOP)/lib $(GROUPTOP)/lib/.libs $(BK_INSTALLRELLIBS) $(BK_LIBDIR)
vpath %.a $(BK_VPATH_A)
vpath %$(LIBEXT) $(BK_VPATH_A)
# Why the fuck are we installing .la files?  It is breaking shit and needs to be special cased all over (e.g. here)
vpath %.la $(BK_VPATH_A)

# -l library extensions pattern rule to recognize libtool libraries
.LIBPATTERNS=lib%$(LIBEXT) lib%.so lib%.a
ifneq ($(strip $(OS_LIBEXT)),)
  .LIBPATTERNS+=lib%$(OS_LIBEXT)
endif
