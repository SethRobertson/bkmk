# -*- makefile -*-
#
# $Id: Make.variables,v 1.74 2002/07/03 19:30:30 jtt Exp $
#
# ++Copyright LIBBK++
#
# Copyright (c) 2001,2002 The Authors.  All rights reserved.
#
# This source code is licensed to you under the terms of the file
# LICENSE.TXT in this release for further details.
#
# Mail <projectbaka@baka.org> for further information
#
# --Copyright LIBBK--
#
#
# Variables
#

NORMALIZE='			\
	s@//@/@g;		\
	s@/\./@/@g;		\
	s@/[^/.]+/\.\./@/@g;	\
	s@/[^/.]+/\.\./@/@g;	\
	s@/[^/.]+/\.\./@/@g;	\
	s@^/n/[^/]*/@/@;	\
	print;'
NORMALIZEPWD="\$$_ = qq^`$(PWD)`^;"$(NORMALIZE)
CURDIR=$(shell $(PERL) -e $(NORMALIZEPWD))

NORMALIZERPATH="\$$_ = qq^`$(PWD)`/$(BK_INSTALLLIBDIR)^;"$(NORMALIZE)
BK_INSTALLRPATH=$(shell $(PERL) -e $(NORMALIZERPATH))

NORMALIZEPATH="\$$_ = qq^`$(PWD)`/$(BK_INSTALLPROGDIR)^;"$(NORMALIZE)
BK_INSTALLPATH=$(shell $(PERL) -e $(NORMALIZEPATH))


#
# Junk
#
BK_NEATSTUFF=$(BK_LOCALJUNK) $(BK_GROUPJUNK) $(BK_PKGJUNK) $(BK_BKJUNK) $(BK_STDJUNK)
BK_CLEANSTUFF=$(BK_NEATSTUFF) $(BK_LOCALCLEANJUNK) $(BK_GROUPCLEANJUNK) $(BK_PKGCLEANJUNK) $(BK_BKCLEANJUNK)
BK_NUKESTUFF=$(BK_CLEANSTUFF) $(BK_NUKEJUNK) $(BK_LOCALNUKEJUNK) $(BK_GROUPNUKEJUNK) $(BK_PKGNUKEJUNK) $(BK_BKNUKEJUNK)
BK_BKJUNK=$(BK_SIMPLE_PROGS) $(BK_LARGE_PROG) $(BK_LARGE_LIB) $(BK_SIMPLE_INTERNALPROGS) $(BK_LARGE_INTERNALPROG) $(BK_LARGE_INTERNALLIB) $(BK_JAVA_JAR)
BK_STDJUNK=*.o *.obj *.lo *.a *.la core tca.log tca.map .libs .inslog* _1001.out a.out mon.out *.core *.class *.err *.htm
BK_BKCLEANJUNK=.depend tags TAGS *.rpt
BK_BKNUKEJUNK=.\\\#* \\\#* *.rej *.orig *~


#
# C source filenames for standard production rules
#
BK_SIMPLE_CSRC:=$(patsubst %,%.c,$(BK_SIMPLE_PROGS) $(BK_SIMPLE_INTERNALPROGS))
BK_LARGE_CSRC:=$(patsubst %.y,%.tab.c,$(BK_LARGE_SRC))
BK_LARGE_CSRC:=$(patsubst %.l,%.c,$(BK_LARGE_CSRC))
BK_LARGE_LIBCSRC:=$(patsubst %.y,%.tab.c,$(BK_LARGE_LIBSRC))
BK_LARGE_LIBCSRC:=$(patsubst %.l,%.c,$(BK_LARGE_LIBCSRC))
_BK_MAN1=$(filter %.1,$(BK_MAN))
_BK_MAN3=$(filter %.3,$(BK_MAN))
_BK_MAN5=$(filter %.5,$(BK_MAN))
_BK_MAN8=$(filter %.8,$(BK_MAN))


#
# Standard commands
#
RRM=$(RM_CONFIG) -rf
RM=$(RM_CONFIG) -f
MKDEP=$(CPP) -M $(CPPFLAGS)
MKDIR=$(MKDIR_CONFIG) -p

# Use -p to preserve timestamps whereever possible. This is mostly so that
# header file installs don't trigger dependencies.

# Install (GNU or BSD)
INSTALL_BINFLAGS=-p -m 775
# install header files read-only to avoid editing them (and not originals)
ifeq ($(findstring CYGWIN,$(BK_OSNAME)),)
INSTALL_INCFLAGS=-p -m 444
else # on CygWin, install -p on read-only files fails
INSTALL_INCFLAGS=-m 444
endif
INSTALL_LIBFLAGS=$(INSTALL_OTHERFLAGS)
INSTALL_OTHERFLAGS=-p -m 664


# Yacc
YFLAGS=
YACCLIBS=-ly

# Lex
LOPTDEBUG= #-CF
LFLAGS=$(LOPTDEBUG)
LEXLIBS=-lfl

# Libtool
LT_CFLAGS=
LT_LDFLAGS=-avoid-version
LT_M_LDFLAGS=-module -avoid-version

LIBTOOL_COMPILE=$(LIBTOOL) --mode compile
LIBTOOL_LINK=$(LIBTOOL) --mode link
LIBTOOL_INSTALL=$(LIBTOOL) --mode install --quiet

######################################################################
# Java stuff
JAVACFLAGS=$(USER_JAVAC_FLAGS) -g
JARFLAGS=-cfm

BK_JAVA_CPATH=$(subst :,$(PATH_SEPARATOR),$(BK_JAVADIR):$(BK_JAVA_CP))
BK_JAVA_TESTCP=$(BK_JAVA_CPATH)$(PATH_SEPARATOR)/usr/local/java/lib/junit.jar

BK_JAVA_PKGDOT=$(subst /,.,$(BK_JAVA_PKG))

# file list variables for Java production rules

BK_JAVA_CLASS:=$(patsubst %.java,$(BK_JAVA_PKG)/%.class,$(BK_JAVA_SRC))
BK_JAVA_TCLASS:=$(patsubst %.java,$(BK_JAVA_PKG)/%.class,$(BK_JAVA_TEST))

# These are recursively expanded variables using =, rather than directly
# expanded variables using :=, so that the $(wildcard ...) matching will
# occur after the java compiler has had a chance to create the inner class
# class files.  Unfortunately, somehow $(wildcard) doesn't see the new files.
#BK_JAVA_ICLASS_TMP=\
#	$(foreach tmp, $(patsubst %.class,%,$(BK_JAVA_CLASS)), \
#		$(wildcard $(BK_JAVADIR)/$(tmp)$$*.class))
BK_JAVA_ICLASS_TMP=$(filter-out %$$*.class, \
  $(shell echo $(patsubst %.class,$(BK_JAVADIR)/%\$$*.class,$(BK_JAVA_CLASS))))
BK_JAVA_ICLASS=\
	$(subst $$,\$$,$(patsubst $(BK_JAVADIR)/%,%,$(BK_JAVA_ICLASS_TMP)))

BK_JAVA_PROPS:=$(wildcard $(GROUPTOP)/$(LOCALE)/*.properties)
BK_JAVA_LOCALE:=$(patsubst $(GROUPTOP)/$(LOCALE)/%,%,$(BK_JAVA_PROPS))

BK_JAVA_PNGS:=$(foreach I,$(IMAGES),$(wildcard $(GROUPTOP)/$(I)/*.png))
BK_JAVA_JPGS:=$(foreach I,$(IMAGES),$(wildcard $(GROUPTOP)/$(I)/*.jpg))
BK_JAVA_GIFS:=$(foreach I,$(IMAGES),$(wildcard $(GROUPTOP)/$(I)/*.gif))
BK_JAVA_IMAGES:=$(patsubst $(GROUPTOP)/%,%,$(BK_JAVA_PNGS) $(BK_JAVA_JPGS) $(BK_JAVA_GIFS))

BK_JAVA_PKG_CLASS:=$(patsubst %,$(BK_JAVADIR)/%,$(BK_JAVA_CLASS))
BK_JAVA_PKG_TCLASS:=$(patsubst %,$(BK_JAVADIR)/%,$(BK_JAVA_TCLASS))
BK_JAVA_PKG_SRC:=$(patsubst %,$(BK_JAVADIR)/$(BK_JAVA_PKG)/%,$(BK_JAVA_SRC))
BK_JAVA_PKG_TEST:=$(patsubst %,$(BK_JAVADIR)/$(BK_JAVA_PKG)/%,$(BK_JAVA_TEST))
# AUX is deprecated - use images instead
BK_JAVA_PKG_AUX:=$(patsubst %,$(BK_JAVADIR)/$(BK_JAVA_PKG)/%,$(BK_JAVA_AUX))
BK_JAVA_PKG_LOCALE:=$(patsubst %,$(BK_JAVADIR)/%,$(BK_JAVA_LOCALE))
BK_JAVA_PKG_IMAGES:=$(patsubst %,$(BK_JAVADIR)/%,$(BK_JAVA_IMAGES))

BK_JAVA_MF:=$(patsubst %.jar,%.MF,$(BK_JAVA_JAR))
BK_JAVA_HELP_JAR:=$(patsubst %, $(BK_JAVA_HELP)_%.jar, $(BK_JAVA_HELP_LANG))

######################################################################
# Jtest stuff
JTEST=/usr/local/parasoft/bin/jtest

JTESTERR={ $(SED) -n -e 's/^\[\([^,]*\), line \([0-9]*\)\]/\1:\2:/' \
		     -e '/^ERRORS/,/^Class Metrics:/p' $*.err && false; }

ifeq ($(DISPLAY),)
JTESTOUT=-nogui
endif
ifeq ($(JTESTUI),)
JTESTOUT=-nogui
endif

ifeq ($(JTESTOUT),)
JTESTERR=true
# don't be nuking generated .ctp files when user may have tweaked them
.PRECIOUS: %.ctp
endif

BK_JAVA_JTEST:=$(patsubst %.java,%.rpt,$(BK_JAVA_SRC))
# what about inner classes?
#BK_JAVA_JTEST+=$(patsubst $(BK_JAVA_PKG)/%.class,%.rpt,$(BK_JAVA_ICLASS))


######################################################################
# C stuff

# Traditional resolver
#RESOLVER_DEFINES=-DRESOLVER=RESOLV
RESOLVER_DEFINES=
RESOLVER_INCLUDES=
RESOLVER_LDS=
#make it work on Windows for now
#LIBRESOLVER=-lresolv $(LIB44BSD)
LIBRESOLVER=
LIB44BSD=#-l44bsd

# Libraries
DBM_LIBS=-ldb
TERMINAL_LIBS=-ltermcap
MATH_LIBS=-lm
COMPRESS_LIBS=-lz

# BK issues
ifneq ($(NO_STDBKCCSTUFF),true)
BK_DEFINES+= $(RESOLVER_DEFINES)
BK_INCS= $(RESOLVER_INCLUDES)
BK_LDS= $(RESOLVER_LDS)
BK_LIBS= -lbk -ldict -lfsma -lpq -lpopt $(ACLIBS) $(LIBRESOLVER) $(MATH_LIBS) $(COMPRESS_LIBS)
endif # NO_STDBKCCSTUFF

ifeq ($(BK_USING_BOUNDS_CHECKING),true)
ifeq ($(CC_CONFIG),gcc)
CC_CONFIG=$(BGCC)
CCOPTS+=-fbounds-checking
endif
# NB: At SYSD, this does not yet work
ifeq ($(CXX_CONFIG),g++)
CXXOPTS+=-fbounds-checking
endif
endif

# C
CC_normal=$(CC_CONFIG) $(CCOPTS)
CC_strict=$(CXX_CONFIG) $(CXXOPTS)
#CC=$(CC_strict)
CC=$(CC_normal)
CXX=$(CXX_CONFIG) $(CXXOPTS)

ifeq ($(CC_CONFIG),gcc)

COMPILER_DEBUG+=-W -Wmissing-prototypes -Wstrict-prototypes -Wchar-subscripts -Wcomment -Wformat -Wimplicit -Wmain -Wmultichar -Wreturn-type -Wswitch -Wtrigraphs -Wno-unused -Wshadow -Wpointer-arith $(COMPILER_DEBUG_ERROR)

ifneq ($(NO_WERROR),true)
COMPILER_DEBUG_ERROR=-Werror
endif

ifneq ($(NO_OPT),true)
ifneq ($(BK_USING_INSURE),true)
ifeq ($(BK_DEBUG_OPT),true)
COPTDEBUG+=-O2
else
COPTDEBUG+=-O3 -mcpu=i686 -march=i686 -fforce-addr -funroll-loops -frerun-cse-after-loop -frerun-loop-opt -malign-functions=4
endif
# gcc doesn't support -Wuninitialized without -O. And if using insure++ you
# get it anyway.
COMPILER_DEBUG+=-Wuninitialized 
endif
endif

ifneq ($(NO_DEBUG),true)
COPTDEBUG+=-g $(COMPILER_DEBUG)
else
COPTDEBUG+=-fomit-frame-pointer
endif

endif # CC is gcc

CFLAGS=$(COPTDEBUG)
CPPFLAGS=$(BK_ALLINCS) $(BK_ALLDEFINES)
LDFLAGS=$(BK_ALLLDS)
LDLIBS=$(BK_ALLLIBS)

OBJEXT=.$(OBJEXT_CONFIG)
ifeq ($(strip $(EXEEXT_CONFIG)),)
EXEEXT=
else
EXEEXT=.$(EXEEXT_CONFIG)
endif

######################################################################
# What are you using, and what do you want?

ifeq ($(BK_WANT_LIBTOOL),false)
LT=
LTCC=
LTLD=
LIBTOOL=: no-libtool [BK_WANT_LIBTOOL=false]
LIBEXT=.a
LT_CFLAGS=
LT_LDFLAGS=
else
LT=$(LIBTOOL)
LTCC=$(LIBTOOL_COMPILE)
LTLD=$(LIBTOOL_LINK)
LIBEXT=.la
OBJEXT=.lo
top_builddir=$(BKMKDIR)
endif

ifeq ($(BK_USING_GPROF),true)
CFLAGS += -pg
endif

ifeq ($(BK_USING_PROF),true)
CFLAGS += -p
endif

ifeq ($(BK_USING_DMALLOC),true)
BK_LIBS+= -ldmalloc
BK_DEFINES+=-DUSING_DMALLOC -DDMALLOC_FUNC_CHECK
endif

ifeq ($(BK_USING_INSURE),true)
BK_DEFINES+=-D__INSIGHT__
CC=$(INSURE)
endif

OS_SEARCHPATH=/usr/local/lib /usr/lib /usr/local/gnu/lib

BK_ALLDEFINES=$(LOCAL_DEFINES) $(GROUP_DEFINES) $(PKG_DEFINES) $(BK_DEFINES) $(OS_DEFINES)
BK_ALLINCS=$(LOCAL_INCS) $(GROUP_INCS) $(PKG_INCS) $(BK_INCS) $(OS_INCS)
BK_ALLLDS=$(LOCAL_LDS) $(GROUP_LDS) $(PKG_LDS) $(BK_LDS) $(OS_LDS)
BK_ALLLIBS=$(LOCAL_LIBS) $(GROUP_LIBS) $(PKG_LIBS) $(BK_LIBS) $(OS_LIBS)
BK_LIBDIR=$(OS_SEARCHPATH) $(patsubst -L%,%,$(filter -L%,$(BK_ALLLDS)))


######################################################################
# Tags
CTAGS=ctags
ETAGS=etags


######################################################################
# These are built in to the shell, so you don't need to use them, but
# they are defined for the use of the excessively paranoid
CD=cd
ECHO=echo

######################################################################
# BUILD directory independence
vpath %.h $(BK_TRUECWD)
vpath %.c $(BK_TRUECWD)
vpath %.l $(BK_TRUECWD)
vpath %.y $(BK_TRUECWD)
vpath %.3 $(BK_TRUECWD)
vpath %.5 $(BK_TRUECWD)
vpath %.1 $(BK_TRUECWD)
vpath %.8 $(BK_TRUECWD)

# -l library search path
vpath %.a $(GROUPTOP)/lib $(GROUPTOP)/lib/.libs
vpath %.a $(BK_INSTALLLIBDIR) $(BK_LIBDIR)
vpath %$(LIBEXT) $(GROUPTOP)/lib $(BK_INSTALLLIBDIR) $(BK_LIBDIR)
